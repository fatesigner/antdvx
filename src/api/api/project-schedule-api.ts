/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ProjectScheduleExInput } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataIQueryableProjectSchedule } from '../models';
// @ts-ignore
import { ResultDataListProjectScheduleOutput } from '../models';
/**
 * ProjectScheduleApi - axios parameter creator
 * @export
 */
export const ProjectScheduleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectScheduleOdataAll: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectSchedule/Odata/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 保存
         * @param {ProjectScheduleExInput} [projectScheduleExInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectScheduleSaveEx: async (projectScheduleExInput?: ProjectScheduleExInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectSchedule/SaveEx`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectScheduleExInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据ProjectNO查询对象集合
         * @param {string} projectNO 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectScheduleprojectNOList: async (projectNO: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectNO' is not null or undefined
            assertParamExists('projectMasterDataProjectScheduleprojectNOList', 'projectNO', projectNO)
            const localVarPath = `/ProjectMasterData/ProjectSchedule/{projectNO}/List`
                .replace(`{${"projectNO"}}`, encodeURIComponent(String(projectNO)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectScheduleApi - functional programming interface
 * @export
 */
export const ProjectScheduleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectScheduleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectScheduleOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableProjectSchedule>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectScheduleOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 保存
         * @param {ProjectScheduleExInput} [projectScheduleExInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectScheduleSaveEx(projectScheduleExInput?: ProjectScheduleExInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectScheduleSaveEx(projectScheduleExInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据ProjectNO查询对象集合
         * @param {string} projectNO 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectScheduleprojectNOList(projectNO: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListProjectScheduleOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectScheduleprojectNOList(projectNO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectScheduleApi - factory interface
 * @export
 */
export const ProjectScheduleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectScheduleApiFp(configuration)
    return {
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectScheduleOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableProjectSchedule> {
            return localVarFp.projectMasterDataProjectScheduleOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 保存
         * @param {ProjectScheduleExInput} [projectScheduleExInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectScheduleSaveEx(projectScheduleExInput?: ProjectScheduleExInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.projectMasterDataProjectScheduleSaveEx(projectScheduleExInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据ProjectNO查询对象集合
         * @param {string} projectNO 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectScheduleprojectNOList(projectNO: string, options?: any): AxiosPromise<ResultDataListProjectScheduleOutput> {
            return localVarFp.projectMasterDataProjectScheduleprojectNOList(projectNO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for projectMasterDataProjectScheduleOdataAll operation in ProjectScheduleApi.
 * @export
 * @interface ProjectScheduleApiProjectMasterDataProjectScheduleOdataAllRequest
 */
export interface ProjectScheduleApiProjectMasterDataProjectScheduleOdataAllRequest {
    /**
     * $filter
     * @type {string}
     * @memberof ProjectScheduleApiProjectMasterDataProjectScheduleOdataAll
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof ProjectScheduleApiProjectMasterDataProjectScheduleOdataAll
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof ProjectScheduleApiProjectMasterDataProjectScheduleOdataAll
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof ProjectScheduleApiProjectMasterDataProjectScheduleOdataAll
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof ProjectScheduleApiProjectMasterDataProjectScheduleOdataAll
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof ProjectScheduleApiProjectMasterDataProjectScheduleOdataAll
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof ProjectScheduleApiProjectMasterDataProjectScheduleOdataAll
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof ProjectScheduleApiProjectMasterDataProjectScheduleOdataAll
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof ProjectScheduleApiProjectMasterDataProjectScheduleOdataAll
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof ProjectScheduleApiProjectMasterDataProjectScheduleOdataAll
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof ProjectScheduleApiProjectMasterDataProjectScheduleOdataAll
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for projectMasterDataProjectScheduleSaveEx operation in ProjectScheduleApi.
 * @export
 * @interface ProjectScheduleApiProjectMasterDataProjectScheduleSaveExRequest
 */
export interface ProjectScheduleApiProjectMasterDataProjectScheduleSaveExRequest {
    /**
     * 
     * @type {ProjectScheduleExInput}
     * @memberof ProjectScheduleApiProjectMasterDataProjectScheduleSaveEx
     */
    readonly projectScheduleExInput?: ProjectScheduleExInput
}

/**
 * Request parameters for projectMasterDataProjectScheduleprojectNOList operation in ProjectScheduleApi.
 * @export
 * @interface ProjectScheduleApiProjectMasterDataProjectScheduleprojectNOListRequest
 */
export interface ProjectScheduleApiProjectMasterDataProjectScheduleprojectNOListRequest {
    /**
     * 主键
     * @type {string}
     * @memberof ProjectScheduleApiProjectMasterDataProjectScheduleprojectNOList
     */
    readonly projectNO: string
}

/**
 * ProjectScheduleApi - object-oriented interface
 * @export
 * @class ProjectScheduleApi
 * @extends {BaseAPI}
 */
export class ProjectScheduleApi extends BaseAPI {
    /**
     * 
     * @summary Odata 查询
     * @param {ProjectScheduleApiProjectMasterDataProjectScheduleOdataAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectScheduleApi
     */
    public projectMasterDataProjectScheduleOdataAll(requestParameters: ProjectScheduleApiProjectMasterDataProjectScheduleOdataAllRequest = {}, options?: any) {
        return ProjectScheduleApiFp(this.configuration).projectMasterDataProjectScheduleOdataAll(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 保存
     * @param {ProjectScheduleApiProjectMasterDataProjectScheduleSaveExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectScheduleApi
     */
    public projectMasterDataProjectScheduleSaveEx(requestParameters: ProjectScheduleApiProjectMasterDataProjectScheduleSaveExRequest = {}, options?: any) {
        return ProjectScheduleApiFp(this.configuration).projectMasterDataProjectScheduleSaveEx(requestParameters.projectScheduleExInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据ProjectNO查询对象集合
     * @param {ProjectScheduleApiProjectMasterDataProjectScheduleprojectNOListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectScheduleApi
     */
    public projectMasterDataProjectScheduleprojectNOList(requestParameters: ProjectScheduleApiProjectMasterDataProjectScheduleprojectNOListRequest, options?: any) {
        return ProjectScheduleApiFp(this.configuration).projectMasterDataProjectScheduleprojectNOList(requestParameters.projectNO, options).then((request) => request(this.axios, this.basePath));
    }
}
