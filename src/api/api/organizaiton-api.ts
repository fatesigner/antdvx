/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IDsInput } from '../models';
// @ts-ignore
import { OrganizaitonInput } from '../models';
// @ts-ignore
import { PageInputBase } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataFileContentResult } from '../models';
// @ts-ignore
import { ResultDataIQueryableOrganizaiton } from '../models';
// @ts-ignore
import { ResultDataListOrganizaitonOutput } from '../models';
// @ts-ignore
import { ResultDataOrganizaitonOutput } from '../models';
// @ts-ignore
import { ResultDataPageResultOrganizaitonOutput } from '../models';
/**
 * OrganizaitonApi - axios parameter creator
 * @export
 */
export const OrganizaitonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataOrganizaitonByIDsExport: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/Organizaiton/ByIDs/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataOrganizaitonByIDsList: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/Organizaiton/ByIDs/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataOrganizaitonDelete: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/Organizaiton/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataOrganizaitonIdInfo: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('masterDataOrganizaitonIdInfo', 'id', id)
            const localVarPath = `/MasterData/Organizaiton/{Id}/Info`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataOrganizaitonOdataAll: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/Organizaiton/Odata/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataOrganizaitonOdataExport: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/Organizaiton/Odata/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataOrganizaitonPageAll: async (pageInputBase?: PageInputBase, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/Organizaiton/Page/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pageInputBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 增加和修改
         * @param {OrganizaitonInput} [organizaitonInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataOrganizaitonSave: async (organizaitonInput?: OrganizaitonInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/Organizaiton/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizaitonInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizaitonApi - functional programming interface
 * @export
 */
export const OrganizaitonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizaitonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataOrganizaitonByIDsExport(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataOrganizaitonByIDsExport(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataOrganizaitonByIDsList(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListOrganizaitonOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataOrganizaitonByIDsList(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataOrganizaitonDelete(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataOrganizaitonDelete(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataOrganizaitonIdInfo(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataOrganizaitonOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataOrganizaitonIdInfo(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataOrganizaitonOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableOrganizaiton>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataOrganizaitonOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataOrganizaitonOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataOrganizaitonOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataOrganizaitonPageAll(pageInputBase?: PageInputBase, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataPageResultOrganizaitonOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataOrganizaitonPageAll(pageInputBase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 增加和修改
         * @param {OrganizaitonInput} [organizaitonInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataOrganizaitonSave(organizaitonInput?: OrganizaitonInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataOrganizaitonSave(organizaitonInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizaitonApi - factory interface
 * @export
 */
export const OrganizaitonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizaitonApiFp(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataOrganizaitonByIDsExport(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.masterDataOrganizaitonByIDsExport(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataOrganizaitonByIDsList(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataListOrganizaitonOutput> {
            return localVarFp.masterDataOrganizaitonByIDsList(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataOrganizaitonDelete(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.masterDataOrganizaitonDelete(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataOrganizaitonIdInfo(id: string, options?: any): AxiosPromise<ResultDataOrganizaitonOutput> {
            return localVarFp.masterDataOrganizaitonIdInfo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataOrganizaitonOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableOrganizaiton> {
            return localVarFp.masterDataOrganizaitonOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataOrganizaitonOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.masterDataOrganizaitonOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataOrganizaitonPageAll(pageInputBase?: PageInputBase, options?: any): AxiosPromise<ResultDataPageResultOrganizaitonOutput> {
            return localVarFp.masterDataOrganizaitonPageAll(pageInputBase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 增加和修改
         * @param {OrganizaitonInput} [organizaitonInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataOrganizaitonSave(organizaitonInput?: OrganizaitonInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.masterDataOrganizaitonSave(organizaitonInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for masterDataOrganizaitonByIDsExport operation in OrganizaitonApi.
 * @export
 * @interface OrganizaitonApiMasterDataOrganizaitonByIDsExportRequest
 */
export interface OrganizaitonApiMasterDataOrganizaitonByIDsExportRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof OrganizaitonApiMasterDataOrganizaitonByIDsExport
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for masterDataOrganizaitonByIDsList operation in OrganizaitonApi.
 * @export
 * @interface OrganizaitonApiMasterDataOrganizaitonByIDsListRequest
 */
export interface OrganizaitonApiMasterDataOrganizaitonByIDsListRequest {
    /**
     * 多个主键
     * @type {IDsInput}
     * @memberof OrganizaitonApiMasterDataOrganizaitonByIDsList
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for masterDataOrganizaitonDelete operation in OrganizaitonApi.
 * @export
 * @interface OrganizaitonApiMasterDataOrganizaitonDeleteRequest
 */
export interface OrganizaitonApiMasterDataOrganizaitonDeleteRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof OrganizaitonApiMasterDataOrganizaitonDelete
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for masterDataOrganizaitonIdInfo operation in OrganizaitonApi.
 * @export
 * @interface OrganizaitonApiMasterDataOrganizaitonIdInfoRequest
 */
export interface OrganizaitonApiMasterDataOrganizaitonIdInfoRequest {
    /**
     * 主键
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonIdInfo
     */
    readonly id: string
}

/**
 * Request parameters for masterDataOrganizaitonOdataAll operation in OrganizaitonApi.
 * @export
 * @interface OrganizaitonApiMasterDataOrganizaitonOdataAllRequest
 */
export interface OrganizaitonApiMasterDataOrganizaitonOdataAllRequest {
    /**
     * $filter
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataAll
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataAll
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataAll
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataAll
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataAll
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataAll
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataAll
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataAll
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataAll
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataAll
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataAll
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for masterDataOrganizaitonOdataExport operation in OrganizaitonApi.
 * @export
 * @interface OrganizaitonApiMasterDataOrganizaitonOdataExportRequest
 */
export interface OrganizaitonApiMasterDataOrganizaitonOdataExportRequest {
    /**
     * $filter
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataExport
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataExport
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataExport
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataExport
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataExport
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataExport
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataExport
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataExport
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataExport
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataExport
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof OrganizaitonApiMasterDataOrganizaitonOdataExport
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for masterDataOrganizaitonPageAll operation in OrganizaitonApi.
 * @export
 * @interface OrganizaitonApiMasterDataOrganizaitonPageAllRequest
 */
export interface OrganizaitonApiMasterDataOrganizaitonPageAllRequest {
    /**
     * 
     * @type {PageInputBase}
     * @memberof OrganizaitonApiMasterDataOrganizaitonPageAll
     */
    readonly pageInputBase?: PageInputBase
}

/**
 * Request parameters for masterDataOrganizaitonSave operation in OrganizaitonApi.
 * @export
 * @interface OrganizaitonApiMasterDataOrganizaitonSaveRequest
 */
export interface OrganizaitonApiMasterDataOrganizaitonSaveRequest {
    /**
     * 
     * @type {OrganizaitonInput}
     * @memberof OrganizaitonApiMasterDataOrganizaitonSave
     */
    readonly organizaitonInput?: OrganizaitonInput
}

/**
 * OrganizaitonApi - object-oriented interface
 * @export
 * @class OrganizaitonApi
 * @extends {BaseAPI}
 */
export class OrganizaitonApi extends BaseAPI {
    /**
     * 
     * @summary 勾选部分Excel导出
     * @param {OrganizaitonApiMasterDataOrganizaitonByIDsExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizaitonApi
     */
    public masterDataOrganizaitonByIDsExport(requestParameters: OrganizaitonApiMasterDataOrganizaitonByIDsExportRequest = {}, options?: any) {
        return OrganizaitonApiFp(this.configuration).masterDataOrganizaitonByIDsExport(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据多个ID查询对象集合
     * @param {OrganizaitonApiMasterDataOrganizaitonByIDsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizaitonApi
     */
    public masterDataOrganizaitonByIDsList(requestParameters: OrganizaitonApiMasterDataOrganizaitonByIDsListRequest = {}, options?: any) {
        return OrganizaitonApiFp(this.configuration).masterDataOrganizaitonByIDsList(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除
     * @param {OrganizaitonApiMasterDataOrganizaitonDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizaitonApi
     */
    public masterDataOrganizaitonDelete(requestParameters: OrganizaitonApiMasterDataOrganizaitonDeleteRequest = {}, options?: any) {
        return OrganizaitonApiFp(this.configuration).masterDataOrganizaitonDelete(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据ID查询对象
     * @param {OrganizaitonApiMasterDataOrganizaitonIdInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizaitonApi
     */
    public masterDataOrganizaitonIdInfo(requestParameters: OrganizaitonApiMasterDataOrganizaitonIdInfoRequest, options?: any) {
        return OrganizaitonApiFp(this.configuration).masterDataOrganizaitonIdInfo(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Odata 查询
     * @param {OrganizaitonApiMasterDataOrganizaitonOdataAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizaitonApi
     */
    public masterDataOrganizaitonOdataAll(requestParameters: OrganizaitonApiMasterDataOrganizaitonOdataAllRequest = {}, options?: any) {
        return OrganizaitonApiFp(this.configuration).masterDataOrganizaitonOdataAll(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary [Odata]Excel导出
     * @param {OrganizaitonApiMasterDataOrganizaitonOdataExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizaitonApi
     */
    public masterDataOrganizaitonOdataExport(requestParameters: OrganizaitonApiMasterDataOrganizaitonOdataExportRequest = {}, options?: any) {
        return OrganizaitonApiFp(this.configuration).masterDataOrganizaitonOdataExport(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 数据库 分页查询
     * @param {OrganizaitonApiMasterDataOrganizaitonPageAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizaitonApi
     */
    public masterDataOrganizaitonPageAll(requestParameters: OrganizaitonApiMasterDataOrganizaitonPageAllRequest = {}, options?: any) {
        return OrganizaitonApiFp(this.configuration).masterDataOrganizaitonPageAll(requestParameters.pageInputBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 增加和修改
     * @param {OrganizaitonApiMasterDataOrganizaitonSaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizaitonApi
     */
    public masterDataOrganizaitonSave(requestParameters: OrganizaitonApiMasterDataOrganizaitonSaveRequest = {}, options?: any) {
        return OrganizaitonApiFp(this.configuration).masterDataOrganizaitonSave(requestParameters.organizaitonInput, options).then((request) => request(this.axios, this.basePath));
    }
}
