/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ProjectUserInput } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataIQueryableSysUserProject } from '../models';
// @ts-ignore
import { ResultDataListProjectOverviewOutput } from '../models';
// @ts-ignore
import { ResultDataListSysUserOutput } from '../models';
// @ts-ignore
import { ResultDataSysUserProject } from '../models';
// @ts-ignore
import { SysUserProjectInput } from '../models';
// @ts-ignore
import { UserProjectInput } from '../models';
/**
 * SysUserProjectApi - axios parameter creator
 * @export
 */
export const SysUserProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 根据用户来关联项目
         * @param {UserProjectInput} [userProjectInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysUserProjectGrantProject: async (userProjectInput?: UserProjectInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/SysUserProject/GrantProject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userProjectInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据项目关联用户
         * @param {ProjectUserInput} [projectUserInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysUserProjectGrantUser: async (projectUserInput?: ProjectUserInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/SysUserProject/GrantUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectUserInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取全部数据
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysUserProjectOdataAll: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/SysUserProject/Odata/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 单条保存与修改
         * @param {SysUserProjectInput} [sysUserProjectInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysUserProjectSave: async (sysUserProjectInput?: SysUserProjectInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/SysUserProject/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sysUserProjectInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据项目Id删除（用户与项目关联关系）
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysUserProjectprojectIdDelete: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('systemManageSysUserProjectprojectIdDelete', 'projectId', projectId)
            const localVarPath = `/SystemManage/SysUserProject/{projectId}/Delete`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 项目Id获取用户集合
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysUserProjectprojectIdGetUserList: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('systemManageSysUserProjectprojectIdGetUserList', 'projectId', projectId)
            const localVarPath = `/SystemManage/SysUserProject/{projectId}/GetUserList`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据用户Code获取项目集合
         * @param {string} userCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysUserProjectuserCodeGetProjectListByUserCode: async (userCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCode' is not null or undefined
            assertParamExists('systemManageSysUserProjectuserCodeGetProjectListByUserCode', 'userCode', userCode)
            const localVarPath = `/SystemManage/SysUserProject/{userCode}/GetProjectListByUserCode`
                .replace(`{${"userCode"}}`, encodeURIComponent(String(userCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据userId删除（用户与项目关联关系）
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysUserProjectuserIdDeleteEx: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('systemManageSysUserProjectuserIdDeleteEx', 'userId', userId)
            const localVarPath = `/SystemManage/SysUserProject/{userId}/DeleteEx`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据用户ID获取项目集合
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysUserProjectuserIdGetUserProjectList: async (userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('systemManageSysUserProjectuserIdGetUserProjectList', 'userId', userId)
            const localVarPath = `/SystemManage/SysUserProject/{userId}/GetUserProjectList`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SysUserProjectApi - functional programming interface
 * @export
 */
export const SysUserProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SysUserProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 根据用户来关联项目
         * @param {UserProjectInput} [userProjectInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageSysUserProjectGrantProject(userProjectInput?: UserProjectInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageSysUserProjectGrantProject(userProjectInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据项目关联用户
         * @param {ProjectUserInput} [projectUserInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageSysUserProjectGrantUser(projectUserInput?: ProjectUserInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageSysUserProjectGrantUser(projectUserInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取全部数据
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageSysUserProjectOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableSysUserProject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageSysUserProjectOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 单条保存与修改
         * @param {SysUserProjectInput} [sysUserProjectInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageSysUserProjectSave(sysUserProjectInput?: SysUserProjectInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataSysUserProject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageSysUserProjectSave(sysUserProjectInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据项目Id删除（用户与项目关联关系）
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageSysUserProjectprojectIdDelete(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageSysUserProjectprojectIdDelete(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 项目Id获取用户集合
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageSysUserProjectprojectIdGetUserList(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListSysUserOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageSysUserProjectprojectIdGetUserList(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据用户Code获取项目集合
         * @param {string} userCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageSysUserProjectuserCodeGetProjectListByUserCode(userCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListProjectOverviewOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageSysUserProjectuserCodeGetProjectListByUserCode(userCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据userId删除（用户与项目关联关系）
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageSysUserProjectuserIdDeleteEx(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageSysUserProjectuserIdDeleteEx(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据用户ID获取项目集合
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageSysUserProjectuserIdGetUserProjectList(userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListProjectOverviewOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageSysUserProjectuserIdGetUserProjectList(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SysUserProjectApi - factory interface
 * @export
 */
export const SysUserProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SysUserProjectApiFp(configuration)
    return {
        /**
         * 
         * @summary 根据用户来关联项目
         * @param {UserProjectInput} [userProjectInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysUserProjectGrantProject(userProjectInput?: UserProjectInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.systemManageSysUserProjectGrantProject(userProjectInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据项目关联用户
         * @param {ProjectUserInput} [projectUserInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysUserProjectGrantUser(projectUserInput?: ProjectUserInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.systemManageSysUserProjectGrantUser(projectUserInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取全部数据
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysUserProjectOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableSysUserProject> {
            return localVarFp.systemManageSysUserProjectOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 单条保存与修改
         * @param {SysUserProjectInput} [sysUserProjectInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysUserProjectSave(sysUserProjectInput?: SysUserProjectInput, options?: any): AxiosPromise<ResultDataSysUserProject> {
            return localVarFp.systemManageSysUserProjectSave(sysUserProjectInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据项目Id删除（用户与项目关联关系）
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysUserProjectprojectIdDelete(projectId: string, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.systemManageSysUserProjectprojectIdDelete(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 项目Id获取用户集合
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysUserProjectprojectIdGetUserList(projectId: string, options?: any): AxiosPromise<ResultDataListSysUserOutput> {
            return localVarFp.systemManageSysUserProjectprojectIdGetUserList(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据用户Code获取项目集合
         * @param {string} userCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysUserProjectuserCodeGetProjectListByUserCode(userCode: string, options?: any): AxiosPromise<ResultDataListProjectOverviewOutput> {
            return localVarFp.systemManageSysUserProjectuserCodeGetProjectListByUserCode(userCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据userId删除（用户与项目关联关系）
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysUserProjectuserIdDeleteEx(userId: string, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.systemManageSysUserProjectuserIdDeleteEx(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据用户ID获取项目集合
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysUserProjectuserIdGetUserProjectList(userId: number, options?: any): AxiosPromise<ResultDataListProjectOverviewOutput> {
            return localVarFp.systemManageSysUserProjectuserIdGetUserProjectList(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for systemManageSysUserProjectGrantProject operation in SysUserProjectApi.
 * @export
 * @interface SysUserProjectApiSystemManageSysUserProjectGrantProjectRequest
 */
export interface SysUserProjectApiSystemManageSysUserProjectGrantProjectRequest {
    /**
     * 
     * @type {UserProjectInput}
     * @memberof SysUserProjectApiSystemManageSysUserProjectGrantProject
     */
    readonly userProjectInput?: UserProjectInput
}

/**
 * Request parameters for systemManageSysUserProjectGrantUser operation in SysUserProjectApi.
 * @export
 * @interface SysUserProjectApiSystemManageSysUserProjectGrantUserRequest
 */
export interface SysUserProjectApiSystemManageSysUserProjectGrantUserRequest {
    /**
     * 
     * @type {ProjectUserInput}
     * @memberof SysUserProjectApiSystemManageSysUserProjectGrantUser
     */
    readonly projectUserInput?: ProjectUserInput
}

/**
 * Request parameters for systemManageSysUserProjectOdataAll operation in SysUserProjectApi.
 * @export
 * @interface SysUserProjectApiSystemManageSysUserProjectOdataAllRequest
 */
export interface SysUserProjectApiSystemManageSysUserProjectOdataAllRequest {
    /**
     * $filter
     * @type {string}
     * @memberof SysUserProjectApiSystemManageSysUserProjectOdataAll
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof SysUserProjectApiSystemManageSysUserProjectOdataAll
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof SysUserProjectApiSystemManageSysUserProjectOdataAll
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof SysUserProjectApiSystemManageSysUserProjectOdataAll
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof SysUserProjectApiSystemManageSysUserProjectOdataAll
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof SysUserProjectApiSystemManageSysUserProjectOdataAll
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof SysUserProjectApiSystemManageSysUserProjectOdataAll
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof SysUserProjectApiSystemManageSysUserProjectOdataAll
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof SysUserProjectApiSystemManageSysUserProjectOdataAll
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof SysUserProjectApiSystemManageSysUserProjectOdataAll
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof SysUserProjectApiSystemManageSysUserProjectOdataAll
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for systemManageSysUserProjectSave operation in SysUserProjectApi.
 * @export
 * @interface SysUserProjectApiSystemManageSysUserProjectSaveRequest
 */
export interface SysUserProjectApiSystemManageSysUserProjectSaveRequest {
    /**
     * 
     * @type {SysUserProjectInput}
     * @memberof SysUserProjectApiSystemManageSysUserProjectSave
     */
    readonly sysUserProjectInput?: SysUserProjectInput
}

/**
 * Request parameters for systemManageSysUserProjectprojectIdDelete operation in SysUserProjectApi.
 * @export
 * @interface SysUserProjectApiSystemManageSysUserProjectprojectIdDeleteRequest
 */
export interface SysUserProjectApiSystemManageSysUserProjectprojectIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof SysUserProjectApiSystemManageSysUserProjectprojectIdDelete
     */
    readonly projectId: string
}

/**
 * Request parameters for systemManageSysUserProjectprojectIdGetUserList operation in SysUserProjectApi.
 * @export
 * @interface SysUserProjectApiSystemManageSysUserProjectprojectIdGetUserListRequest
 */
export interface SysUserProjectApiSystemManageSysUserProjectprojectIdGetUserListRequest {
    /**
     * 
     * @type {string}
     * @memberof SysUserProjectApiSystemManageSysUserProjectprojectIdGetUserList
     */
    readonly projectId: string
}

/**
 * Request parameters for systemManageSysUserProjectuserCodeGetProjectListByUserCode operation in SysUserProjectApi.
 * @export
 * @interface SysUserProjectApiSystemManageSysUserProjectuserCodeGetProjectListByUserCodeRequest
 */
export interface SysUserProjectApiSystemManageSysUserProjectuserCodeGetProjectListByUserCodeRequest {
    /**
     * 
     * @type {string}
     * @memberof SysUserProjectApiSystemManageSysUserProjectuserCodeGetProjectListByUserCode
     */
    readonly userCode: string
}

/**
 * Request parameters for systemManageSysUserProjectuserIdDeleteEx operation in SysUserProjectApi.
 * @export
 * @interface SysUserProjectApiSystemManageSysUserProjectuserIdDeleteExRequest
 */
export interface SysUserProjectApiSystemManageSysUserProjectuserIdDeleteExRequest {
    /**
     * 
     * @type {string}
     * @memberof SysUserProjectApiSystemManageSysUserProjectuserIdDeleteEx
     */
    readonly userId: string
}

/**
 * Request parameters for systemManageSysUserProjectuserIdGetUserProjectList operation in SysUserProjectApi.
 * @export
 * @interface SysUserProjectApiSystemManageSysUserProjectuserIdGetUserProjectListRequest
 */
export interface SysUserProjectApiSystemManageSysUserProjectuserIdGetUserProjectListRequest {
    /**
     * 
     * @type {number}
     * @memberof SysUserProjectApiSystemManageSysUserProjectuserIdGetUserProjectList
     */
    readonly userId: number
}

/**
 * SysUserProjectApi - object-oriented interface
 * @export
 * @class SysUserProjectApi
 * @extends {BaseAPI}
 */
export class SysUserProjectApi extends BaseAPI {
    /**
     * 
     * @summary 根据用户来关联项目
     * @param {SysUserProjectApiSystemManageSysUserProjectGrantProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserProjectApi
     */
    public systemManageSysUserProjectGrantProject(requestParameters: SysUserProjectApiSystemManageSysUserProjectGrantProjectRequest = {}, options?: any) {
        return SysUserProjectApiFp(this.configuration).systemManageSysUserProjectGrantProject(requestParameters.userProjectInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据项目关联用户
     * @param {SysUserProjectApiSystemManageSysUserProjectGrantUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserProjectApi
     */
    public systemManageSysUserProjectGrantUser(requestParameters: SysUserProjectApiSystemManageSysUserProjectGrantUserRequest = {}, options?: any) {
        return SysUserProjectApiFp(this.configuration).systemManageSysUserProjectGrantUser(requestParameters.projectUserInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取全部数据
     * @param {SysUserProjectApiSystemManageSysUserProjectOdataAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserProjectApi
     */
    public systemManageSysUserProjectOdataAll(requestParameters: SysUserProjectApiSystemManageSysUserProjectOdataAllRequest = {}, options?: any) {
        return SysUserProjectApiFp(this.configuration).systemManageSysUserProjectOdataAll(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 单条保存与修改
     * @param {SysUserProjectApiSystemManageSysUserProjectSaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserProjectApi
     */
    public systemManageSysUserProjectSave(requestParameters: SysUserProjectApiSystemManageSysUserProjectSaveRequest = {}, options?: any) {
        return SysUserProjectApiFp(this.configuration).systemManageSysUserProjectSave(requestParameters.sysUserProjectInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据项目Id删除（用户与项目关联关系）
     * @param {SysUserProjectApiSystemManageSysUserProjectprojectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserProjectApi
     */
    public systemManageSysUserProjectprojectIdDelete(requestParameters: SysUserProjectApiSystemManageSysUserProjectprojectIdDeleteRequest, options?: any) {
        return SysUserProjectApiFp(this.configuration).systemManageSysUserProjectprojectIdDelete(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 项目Id获取用户集合
     * @param {SysUserProjectApiSystemManageSysUserProjectprojectIdGetUserListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserProjectApi
     */
    public systemManageSysUserProjectprojectIdGetUserList(requestParameters: SysUserProjectApiSystemManageSysUserProjectprojectIdGetUserListRequest, options?: any) {
        return SysUserProjectApiFp(this.configuration).systemManageSysUserProjectprojectIdGetUserList(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据用户Code获取项目集合
     * @param {SysUserProjectApiSystemManageSysUserProjectuserCodeGetProjectListByUserCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserProjectApi
     */
    public systemManageSysUserProjectuserCodeGetProjectListByUserCode(requestParameters: SysUserProjectApiSystemManageSysUserProjectuserCodeGetProjectListByUserCodeRequest, options?: any) {
        return SysUserProjectApiFp(this.configuration).systemManageSysUserProjectuserCodeGetProjectListByUserCode(requestParameters.userCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据userId删除（用户与项目关联关系）
     * @param {SysUserProjectApiSystemManageSysUserProjectuserIdDeleteExRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserProjectApi
     */
    public systemManageSysUserProjectuserIdDeleteEx(requestParameters: SysUserProjectApiSystemManageSysUserProjectuserIdDeleteExRequest, options?: any) {
        return SysUserProjectApiFp(this.configuration).systemManageSysUserProjectuserIdDeleteEx(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据用户ID获取项目集合
     * @param {SysUserProjectApiSystemManageSysUserProjectuserIdGetUserProjectListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserProjectApi
     */
    public systemManageSysUserProjectuserIdGetUserProjectList(requestParameters: SysUserProjectApiSystemManageSysUserProjectuserIdGetUserProjectListRequest, options?: any) {
        return SysUserProjectApiFp(this.configuration).systemManageSysUserProjectuserIdGetUserProjectList(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }
}
