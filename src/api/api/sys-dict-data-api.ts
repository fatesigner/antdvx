/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddDictDataInput } from '../models';
// @ts-ignore
import { ChageStateDictDataInput } from '../models';
// @ts-ignore
import { DeleteDictDataInput } from '../models';
// @ts-ignore
import { DictDataPageInput } from '../models';
// @ts-ignore
import { QueryDictDataInput } from '../models';
// @ts-ignore
import { QueryDictDataListInput } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataListSysDictData } from '../models';
// @ts-ignore
import { ResultDataPageResultDictDataOutput } from '../models';
// @ts-ignore
import { ResultDataSysDictData } from '../models';
// @ts-ignore
import { UpdateDictDataInput } from '../models';
/**
 * SysDictDataApi - axios parameter creator
 * @export
 */
export const SysDictDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 增加字典值
         * @param {AddDictDataInput} [addDictDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictDataadd: async (addDictDataInput?: AddDictDataInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysDictData/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addDictDataInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改字典值状态
         * @param {ChageStateDictDataInput} [chageStateDictDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictDatachangeStatus: async (chageStateDictDataInput?: ChageStateDictDataInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysDictData/changeStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(chageStateDictDataInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除字典值
         * @param {DeleteDictDataInput} [deleteDictDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictDatadelete: async (deleteDictDataInput?: DeleteDictDataInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysDictData/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteDictDataInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 字典值详情
         * @param {QueryDictDataInput} [queryDictDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictDatadetail: async (queryDictDataInput?: QueryDictDataInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysDictData/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryDictDataInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新字典值
         * @param {UpdateDictDataInput} [updateDictDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictDataedit: async (updateDictDataInput?: UpdateDictDataInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysDictData/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDictDataInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取某个字典类型下字典值列表
         * @param {QueryDictDataListInput} [queryDictDataListInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictDatalist: async (queryDictDataListInput?: QueryDictDataListInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysDictData/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryDictDataListInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页查询字典值
         * @param {DictDataPageInput} [dictDataPageInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictDatapage: async (dictDataPageInput?: DictDataPageInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysDictData/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dictDataPageInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SysDictDataApi - functional programming interface
 * @export
 */
export const SysDictDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SysDictDataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 增加字典值
         * @param {AddDictDataInput} [addDictDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysDictDataadd(addDictDataInput?: AddDictDataInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataSysDictData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysDictDataadd(addDictDataInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 修改字典值状态
         * @param {ChageStateDictDataInput} [chageStateDictDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysDictDatachangeStatus(chageStateDictDataInput?: ChageStateDictDataInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysDictDatachangeStatus(chageStateDictDataInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 删除字典值
         * @param {DeleteDictDataInput} [deleteDictDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysDictDatadelete(deleteDictDataInput?: DeleteDictDataInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysDictDatadelete(deleteDictDataInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 字典值详情
         * @param {QueryDictDataInput} [queryDictDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysDictDatadetail(queryDictDataInput?: QueryDictDataInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataSysDictData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysDictDatadetail(queryDictDataInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 更新字典值
         * @param {UpdateDictDataInput} [updateDictDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysDictDataedit(updateDictDataInput?: UpdateDictDataInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysDictDataedit(updateDictDataInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取某个字典类型下字典值列表
         * @param {QueryDictDataListInput} [queryDictDataListInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysDictDatalist(queryDictDataListInput?: QueryDictDataListInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListSysDictData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysDictDatalist(queryDictDataListInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 分页查询字典值
         * @param {DictDataPageInput} [dictDataPageInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysDictDatapage(dictDataPageInput?: DictDataPageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataPageResultDictDataOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysDictDatapage(dictDataPageInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SysDictDataApi - factory interface
 * @export
 */
export const SysDictDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SysDictDataApiFp(configuration)
    return {
        /**
         * 
         * @summary 增加字典值
         * @param {AddDictDataInput} [addDictDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictDataadd(addDictDataInput?: AddDictDataInput, options?: any): AxiosPromise<ResultDataSysDictData> {
            return localVarFp.sysDictDataadd(addDictDataInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改字典值状态
         * @param {ChageStateDictDataInput} [chageStateDictDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictDatachangeStatus(chageStateDictDataInput?: ChageStateDictDataInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.sysDictDatachangeStatus(chageStateDictDataInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除字典值
         * @param {DeleteDictDataInput} [deleteDictDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictDatadelete(deleteDictDataInput?: DeleteDictDataInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.sysDictDatadelete(deleteDictDataInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 字典值详情
         * @param {QueryDictDataInput} [queryDictDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictDatadetail(queryDictDataInput?: QueryDictDataInput, options?: any): AxiosPromise<ResultDataSysDictData> {
            return localVarFp.sysDictDatadetail(queryDictDataInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新字典值
         * @param {UpdateDictDataInput} [updateDictDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictDataedit(updateDictDataInput?: UpdateDictDataInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.sysDictDataedit(updateDictDataInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取某个字典类型下字典值列表
         * @param {QueryDictDataListInput} [queryDictDataListInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictDatalist(queryDictDataListInput?: QueryDictDataListInput, options?: any): AxiosPromise<ResultDataListSysDictData> {
            return localVarFp.sysDictDatalist(queryDictDataListInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分页查询字典值
         * @param {DictDataPageInput} [dictDataPageInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictDatapage(dictDataPageInput?: DictDataPageInput, options?: any): AxiosPromise<ResultDataPageResultDictDataOutput> {
            return localVarFp.sysDictDatapage(dictDataPageInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for sysDictDataadd operation in SysDictDataApi.
 * @export
 * @interface SysDictDataApiSysDictDataaddRequest
 */
export interface SysDictDataApiSysDictDataaddRequest {
    /**
     * 
     * @type {AddDictDataInput}
     * @memberof SysDictDataApiSysDictDataadd
     */
    readonly addDictDataInput?: AddDictDataInput
}

/**
 * Request parameters for sysDictDatachangeStatus operation in SysDictDataApi.
 * @export
 * @interface SysDictDataApiSysDictDatachangeStatusRequest
 */
export interface SysDictDataApiSysDictDatachangeStatusRequest {
    /**
     * 
     * @type {ChageStateDictDataInput}
     * @memberof SysDictDataApiSysDictDatachangeStatus
     */
    readonly chageStateDictDataInput?: ChageStateDictDataInput
}

/**
 * Request parameters for sysDictDatadelete operation in SysDictDataApi.
 * @export
 * @interface SysDictDataApiSysDictDatadeleteRequest
 */
export interface SysDictDataApiSysDictDatadeleteRequest {
    /**
     * 
     * @type {DeleteDictDataInput}
     * @memberof SysDictDataApiSysDictDatadelete
     */
    readonly deleteDictDataInput?: DeleteDictDataInput
}

/**
 * Request parameters for sysDictDatadetail operation in SysDictDataApi.
 * @export
 * @interface SysDictDataApiSysDictDatadetailRequest
 */
export interface SysDictDataApiSysDictDatadetailRequest {
    /**
     * 
     * @type {QueryDictDataInput}
     * @memberof SysDictDataApiSysDictDatadetail
     */
    readonly queryDictDataInput?: QueryDictDataInput
}

/**
 * Request parameters for sysDictDataedit operation in SysDictDataApi.
 * @export
 * @interface SysDictDataApiSysDictDataeditRequest
 */
export interface SysDictDataApiSysDictDataeditRequest {
    /**
     * 
     * @type {UpdateDictDataInput}
     * @memberof SysDictDataApiSysDictDataedit
     */
    readonly updateDictDataInput?: UpdateDictDataInput
}

/**
 * Request parameters for sysDictDatalist operation in SysDictDataApi.
 * @export
 * @interface SysDictDataApiSysDictDatalistRequest
 */
export interface SysDictDataApiSysDictDatalistRequest {
    /**
     * 
     * @type {QueryDictDataListInput}
     * @memberof SysDictDataApiSysDictDatalist
     */
    readonly queryDictDataListInput?: QueryDictDataListInput
}

/**
 * Request parameters for sysDictDatapage operation in SysDictDataApi.
 * @export
 * @interface SysDictDataApiSysDictDatapageRequest
 */
export interface SysDictDataApiSysDictDatapageRequest {
    /**
     * 
     * @type {DictDataPageInput}
     * @memberof SysDictDataApiSysDictDatapage
     */
    readonly dictDataPageInput?: DictDataPageInput
}

/**
 * SysDictDataApi - object-oriented interface
 * @export
 * @class SysDictDataApi
 * @extends {BaseAPI}
 */
export class SysDictDataApi extends BaseAPI {
    /**
     * 
     * @summary 增加字典值
     * @param {SysDictDataApiSysDictDataaddRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDictDataApi
     */
    public sysDictDataadd(requestParameters: SysDictDataApiSysDictDataaddRequest = {}, options?: any) {
        return SysDictDataApiFp(this.configuration).sysDictDataadd(requestParameters.addDictDataInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改字典值状态
     * @param {SysDictDataApiSysDictDatachangeStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDictDataApi
     */
    public sysDictDatachangeStatus(requestParameters: SysDictDataApiSysDictDatachangeStatusRequest = {}, options?: any) {
        return SysDictDataApiFp(this.configuration).sysDictDatachangeStatus(requestParameters.chageStateDictDataInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除字典值
     * @param {SysDictDataApiSysDictDatadeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDictDataApi
     */
    public sysDictDatadelete(requestParameters: SysDictDataApiSysDictDatadeleteRequest = {}, options?: any) {
        return SysDictDataApiFp(this.configuration).sysDictDatadelete(requestParameters.deleteDictDataInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 字典值详情
     * @param {SysDictDataApiSysDictDatadetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDictDataApi
     */
    public sysDictDatadetail(requestParameters: SysDictDataApiSysDictDatadetailRequest = {}, options?: any) {
        return SysDictDataApiFp(this.configuration).sysDictDatadetail(requestParameters.queryDictDataInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新字典值
     * @param {SysDictDataApiSysDictDataeditRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDictDataApi
     */
    public sysDictDataedit(requestParameters: SysDictDataApiSysDictDataeditRequest = {}, options?: any) {
        return SysDictDataApiFp(this.configuration).sysDictDataedit(requestParameters.updateDictDataInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取某个字典类型下字典值列表
     * @param {SysDictDataApiSysDictDatalistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDictDataApi
     */
    public sysDictDatalist(requestParameters: SysDictDataApiSysDictDatalistRequest = {}, options?: any) {
        return SysDictDataApiFp(this.configuration).sysDictDatalist(requestParameters.queryDictDataListInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 分页查询字典值
     * @param {SysDictDataApiSysDictDatapageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDictDataApi
     */
    public sysDictDatapage(requestParameters: SysDictDataApiSysDictDatapageRequest = {}, options?: any) {
        return SysDictDataApiFp(this.configuration).sysDictDatapage(requestParameters.dictDataPageInput, options).then((request) => request(this.axios, this.basePath));
    }
}
