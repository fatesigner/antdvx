/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IDsInput } from '../models';
// @ts-ignore
import { PageInputBase } from '../models';
// @ts-ignore
import { ProjectOverviewInput } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataFileContentResult } from '../models';
// @ts-ignore
import { ResultDataIQueryableProjectOverviewOutput } from '../models';
// @ts-ignore
import { ResultDataListProjectOverviewOutput } from '../models';
// @ts-ignore
import { ResultDataPageResultProjectOverviewOutput } from '../models';
// @ts-ignore
import { ResultDataProjectOverviewOutput } from '../models';
/**
 * ProjectOverviewApi - axios parameter creator
 * @export
 */
export const ProjectOverviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataProjectOverviewByIDsExport: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/ProjectOverview/ByIDs/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataProjectOverviewByIDsList: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/ProjectOverview/ByIDs/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataProjectOverviewDelete: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/ProjectOverview/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataProjectOverviewIdInfo: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('masterDataProjectOverviewIdInfo', 'id', id)
            const localVarPath = `/MasterData/ProjectOverview/{Id}/Info`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {string} [userCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataProjectOverviewOdataAll: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, userCode?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/ProjectOverview/Odata/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }

            if (userCode !== undefined) {
                localVarQueryParameter['userCode'] = userCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataProjectOverviewOdataExport: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/ProjectOverview/Odata/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataProjectOverviewPageAll: async (pageInputBase?: PageInputBase, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/ProjectOverview/Page/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pageInputBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 增加和修改
         * @param {ProjectOverviewInput} [projectOverviewInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataProjectOverviewSave: async (projectOverviewInput?: ProjectOverviewInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/ProjectOverview/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectOverviewInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary SysUserProject中分配的项目
         * @param {string} userCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataProjectOverviewuserCodeAuth: async (userCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCode' is not null or undefined
            assertParamExists('masterDataProjectOverviewuserCodeAuth', 'userCode', userCode)
            const localVarPath = `/MasterData/ProjectOverview/{userCode}/Auth`
                .replace(`{${"userCode"}}`, encodeURIComponent(String(userCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectOverviewApi - functional programming interface
 * @export
 */
export const ProjectOverviewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectOverviewApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataProjectOverviewByIDsExport(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataProjectOverviewByIDsExport(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataProjectOverviewByIDsList(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListProjectOverviewOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataProjectOverviewByIDsList(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataProjectOverviewDelete(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataProjectOverviewDelete(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataProjectOverviewIdInfo(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataProjectOverviewOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataProjectOverviewIdInfo(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {string} [userCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataProjectOverviewOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, userCode?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableProjectOverviewOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataProjectOverviewOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, userCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataProjectOverviewOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataProjectOverviewOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataProjectOverviewPageAll(pageInputBase?: PageInputBase, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataPageResultProjectOverviewOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataProjectOverviewPageAll(pageInputBase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 增加和修改
         * @param {ProjectOverviewInput} [projectOverviewInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataProjectOverviewSave(projectOverviewInput?: ProjectOverviewInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataProjectOverviewSave(projectOverviewInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary SysUserProject中分配的项目
         * @param {string} userCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataProjectOverviewuserCodeAuth(userCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListProjectOverviewOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataProjectOverviewuserCodeAuth(userCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectOverviewApi - factory interface
 * @export
 */
export const ProjectOverviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectOverviewApiFp(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataProjectOverviewByIDsExport(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.masterDataProjectOverviewByIDsExport(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataProjectOverviewByIDsList(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataListProjectOverviewOutput> {
            return localVarFp.masterDataProjectOverviewByIDsList(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataProjectOverviewDelete(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.masterDataProjectOverviewDelete(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataProjectOverviewIdInfo(id: string, options?: any): AxiosPromise<ResultDataProjectOverviewOutput> {
            return localVarFp.masterDataProjectOverviewIdInfo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {string} [userCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataProjectOverviewOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, userCode?: string, options?: any): AxiosPromise<ResultDataIQueryableProjectOverviewOutput> {
            return localVarFp.masterDataProjectOverviewOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, userCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataProjectOverviewOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.masterDataProjectOverviewOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataProjectOverviewPageAll(pageInputBase?: PageInputBase, options?: any): AxiosPromise<ResultDataPageResultProjectOverviewOutput> {
            return localVarFp.masterDataProjectOverviewPageAll(pageInputBase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 增加和修改
         * @param {ProjectOverviewInput} [projectOverviewInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataProjectOverviewSave(projectOverviewInput?: ProjectOverviewInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.masterDataProjectOverviewSave(projectOverviewInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary SysUserProject中分配的项目
         * @param {string} userCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataProjectOverviewuserCodeAuth(userCode: string, options?: any): AxiosPromise<ResultDataListProjectOverviewOutput> {
            return localVarFp.masterDataProjectOverviewuserCodeAuth(userCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for masterDataProjectOverviewByIDsExport operation in ProjectOverviewApi.
 * @export
 * @interface ProjectOverviewApiMasterDataProjectOverviewByIDsExportRequest
 */
export interface ProjectOverviewApiMasterDataProjectOverviewByIDsExportRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewByIDsExport
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for masterDataProjectOverviewByIDsList operation in ProjectOverviewApi.
 * @export
 * @interface ProjectOverviewApiMasterDataProjectOverviewByIDsListRequest
 */
export interface ProjectOverviewApiMasterDataProjectOverviewByIDsListRequest {
    /**
     * 多个主键
     * @type {IDsInput}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewByIDsList
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for masterDataProjectOverviewDelete operation in ProjectOverviewApi.
 * @export
 * @interface ProjectOverviewApiMasterDataProjectOverviewDeleteRequest
 */
export interface ProjectOverviewApiMasterDataProjectOverviewDeleteRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewDelete
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for masterDataProjectOverviewIdInfo operation in ProjectOverviewApi.
 * @export
 * @interface ProjectOverviewApiMasterDataProjectOverviewIdInfoRequest
 */
export interface ProjectOverviewApiMasterDataProjectOverviewIdInfoRequest {
    /**
     * 主键
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewIdInfo
     */
    readonly id: string
}

/**
 * Request parameters for masterDataProjectOverviewOdataAll operation in ProjectOverviewApi.
 * @export
 * @interface ProjectOverviewApiMasterDataProjectOverviewOdataAllRequest
 */
export interface ProjectOverviewApiMasterDataProjectOverviewOdataAllRequest {
    /**
     * $filter
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataAll
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataAll
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataAll
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataAll
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataAll
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataAll
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataAll
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataAll
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataAll
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataAll
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataAll
     */
    readonly deltatoken?: string

    /**
     * 
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataAll
     */
    readonly userCode?: string
}

/**
 * Request parameters for masterDataProjectOverviewOdataExport operation in ProjectOverviewApi.
 * @export
 * @interface ProjectOverviewApiMasterDataProjectOverviewOdataExportRequest
 */
export interface ProjectOverviewApiMasterDataProjectOverviewOdataExportRequest {
    /**
     * $filter
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataExport
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataExport
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataExport
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataExport
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataExport
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataExport
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataExport
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataExport
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataExport
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataExport
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewOdataExport
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for masterDataProjectOverviewPageAll operation in ProjectOverviewApi.
 * @export
 * @interface ProjectOverviewApiMasterDataProjectOverviewPageAllRequest
 */
export interface ProjectOverviewApiMasterDataProjectOverviewPageAllRequest {
    /**
     * 
     * @type {PageInputBase}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewPageAll
     */
    readonly pageInputBase?: PageInputBase
}

/**
 * Request parameters for masterDataProjectOverviewSave operation in ProjectOverviewApi.
 * @export
 * @interface ProjectOverviewApiMasterDataProjectOverviewSaveRequest
 */
export interface ProjectOverviewApiMasterDataProjectOverviewSaveRequest {
    /**
     * 
     * @type {ProjectOverviewInput}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewSave
     */
    readonly projectOverviewInput?: ProjectOverviewInput
}

/**
 * Request parameters for masterDataProjectOverviewuserCodeAuth operation in ProjectOverviewApi.
 * @export
 * @interface ProjectOverviewApiMasterDataProjectOverviewuserCodeAuthRequest
 */
export interface ProjectOverviewApiMasterDataProjectOverviewuserCodeAuthRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectOverviewApiMasterDataProjectOverviewuserCodeAuth
     */
    readonly userCode: string
}

/**
 * ProjectOverviewApi - object-oriented interface
 * @export
 * @class ProjectOverviewApi
 * @extends {BaseAPI}
 */
export class ProjectOverviewApi extends BaseAPI {
    /**
     * 
     * @summary 勾选部分Excel导出
     * @param {ProjectOverviewApiMasterDataProjectOverviewByIDsExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectOverviewApi
     */
    public masterDataProjectOverviewByIDsExport(requestParameters: ProjectOverviewApiMasterDataProjectOverviewByIDsExportRequest = {}, options?: any) {
        return ProjectOverviewApiFp(this.configuration).masterDataProjectOverviewByIDsExport(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据多个ID查询对象集合
     * @param {ProjectOverviewApiMasterDataProjectOverviewByIDsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectOverviewApi
     */
    public masterDataProjectOverviewByIDsList(requestParameters: ProjectOverviewApiMasterDataProjectOverviewByIDsListRequest = {}, options?: any) {
        return ProjectOverviewApiFp(this.configuration).masterDataProjectOverviewByIDsList(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除
     * @param {ProjectOverviewApiMasterDataProjectOverviewDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectOverviewApi
     */
    public masterDataProjectOverviewDelete(requestParameters: ProjectOverviewApiMasterDataProjectOverviewDeleteRequest = {}, options?: any) {
        return ProjectOverviewApiFp(this.configuration).masterDataProjectOverviewDelete(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据ID查询对象
     * @param {ProjectOverviewApiMasterDataProjectOverviewIdInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectOverviewApi
     */
    public masterDataProjectOverviewIdInfo(requestParameters: ProjectOverviewApiMasterDataProjectOverviewIdInfoRequest, options?: any) {
        return ProjectOverviewApiFp(this.configuration).masterDataProjectOverviewIdInfo(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Odata 查询
     * @param {ProjectOverviewApiMasterDataProjectOverviewOdataAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectOverviewApi
     */
    public masterDataProjectOverviewOdataAll(requestParameters: ProjectOverviewApiMasterDataProjectOverviewOdataAllRequest = {}, options?: any) {
        return ProjectOverviewApiFp(this.configuration).masterDataProjectOverviewOdataAll(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, requestParameters.userCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary [Odata]Excel导出
     * @param {ProjectOverviewApiMasterDataProjectOverviewOdataExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectOverviewApi
     */
    public masterDataProjectOverviewOdataExport(requestParameters: ProjectOverviewApiMasterDataProjectOverviewOdataExportRequest = {}, options?: any) {
        return ProjectOverviewApiFp(this.configuration).masterDataProjectOverviewOdataExport(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 数据库 分页查询
     * @param {ProjectOverviewApiMasterDataProjectOverviewPageAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectOverviewApi
     */
    public masterDataProjectOverviewPageAll(requestParameters: ProjectOverviewApiMasterDataProjectOverviewPageAllRequest = {}, options?: any) {
        return ProjectOverviewApiFp(this.configuration).masterDataProjectOverviewPageAll(requestParameters.pageInputBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 增加和修改
     * @param {ProjectOverviewApiMasterDataProjectOverviewSaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectOverviewApi
     */
    public masterDataProjectOverviewSave(requestParameters: ProjectOverviewApiMasterDataProjectOverviewSaveRequest = {}, options?: any) {
        return ProjectOverviewApiFp(this.configuration).masterDataProjectOverviewSave(requestParameters.projectOverviewInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary SysUserProject中分配的项目
     * @param {ProjectOverviewApiMasterDataProjectOverviewuserCodeAuthRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectOverviewApi
     */
    public masterDataProjectOverviewuserCodeAuth(requestParameters: ProjectOverviewApiMasterDataProjectOverviewuserCodeAuthRequest, options?: any) {
        return ProjectOverviewApiFp(this.configuration).masterDataProjectOverviewuserCodeAuth(requestParameters.userCode, options).then((request) => request(this.axios, this.basePath));
    }
}
