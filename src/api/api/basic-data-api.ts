/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BasicDataInput } from '../models';
// @ts-ignore
import { IDsInput } from '../models';
// @ts-ignore
import { PageInputBase } from '../models';
// @ts-ignore
import { ResultDataBasicDataOutput } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataFileContentResult } from '../models';
// @ts-ignore
import { ResultDataIQueryableBasicData } from '../models';
// @ts-ignore
import { ResultDataListBasicDataOutput } from '../models';
// @ts-ignore
import { ResultDataListString } from '../models';
// @ts-ignore
import { ResultDataPageResultBasicDataOutput } from '../models';
/**
 * BasicDataApi - axios parameter creator
 * @export
 */
export const BasicDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDataByIDsExport: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/BasicData/ByIDs/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDataByIDsList: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/BasicData/ByIDs/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取DataType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDataDataTypes: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/BasicData/DataTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDataDelete: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/BasicData/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDataIdInfo: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('masterDataBasicDataIdInfo', 'id', id)
            const localVarPath = `/MasterData/BasicData/{Id}/Info`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDataOdataAll: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/BasicData/Odata/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDataOdataExport: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/BasicData/Odata/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDataPageAll: async (pageInputBase?: PageInputBase, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/BasicData/Page/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pageInputBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 增加和修改
         * @param {BasicDataInput} [basicDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDataSave: async (basicDataInput?: BasicDataInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/BasicData/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(basicDataInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据DataType查询集合
         * @param {string} dataType 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDatadataTypeList: async (dataType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataType' is not null or undefined
            assertParamExists('masterDataBasicDatadataTypeList', 'dataType', dataType)
            const localVarPath = `/MasterData/BasicData/{dataType}/List`
                .replace(`{${"dataType"}}`, encodeURIComponent(String(dataType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicDataApi - functional programming interface
 * @export
 */
export const BasicDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BasicDataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataBasicDataByIDsExport(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataBasicDataByIDsExport(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataBasicDataByIDsList(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListBasicDataOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataBasicDataByIDsList(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取DataType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataBasicDataDataTypes(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListString>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataBasicDataDataTypes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataBasicDataDelete(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataBasicDataDelete(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataBasicDataIdInfo(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBasicDataOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataBasicDataIdInfo(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataBasicDataOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableBasicData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataBasicDataOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataBasicDataOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataBasicDataOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataBasicDataPageAll(pageInputBase?: PageInputBase, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataPageResultBasicDataOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataBasicDataPageAll(pageInputBase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 增加和修改
         * @param {BasicDataInput} [basicDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataBasicDataSave(basicDataInput?: BasicDataInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataBasicDataSave(basicDataInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据DataType查询集合
         * @param {string} dataType 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataBasicDatadataTypeList(dataType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListBasicDataOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataBasicDatadataTypeList(dataType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BasicDataApi - factory interface
 * @export
 */
export const BasicDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BasicDataApiFp(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDataByIDsExport(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.masterDataBasicDataByIDsExport(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDataByIDsList(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataListBasicDataOutput> {
            return localVarFp.masterDataBasicDataByIDsList(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取DataType
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDataDataTypes(options?: any): AxiosPromise<ResultDataListString> {
            return localVarFp.masterDataBasicDataDataTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDataDelete(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.masterDataBasicDataDelete(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDataIdInfo(id: string, options?: any): AxiosPromise<ResultDataBasicDataOutput> {
            return localVarFp.masterDataBasicDataIdInfo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDataOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableBasicData> {
            return localVarFp.masterDataBasicDataOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDataOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.masterDataBasicDataOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDataPageAll(pageInputBase?: PageInputBase, options?: any): AxiosPromise<ResultDataPageResultBasicDataOutput> {
            return localVarFp.masterDataBasicDataPageAll(pageInputBase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 增加和修改
         * @param {BasicDataInput} [basicDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDataSave(basicDataInput?: BasicDataInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.masterDataBasicDataSave(basicDataInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据DataType查询集合
         * @param {string} dataType 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataBasicDatadataTypeList(dataType: string, options?: any): AxiosPromise<ResultDataListBasicDataOutput> {
            return localVarFp.masterDataBasicDatadataTypeList(dataType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for masterDataBasicDataByIDsExport operation in BasicDataApi.
 * @export
 * @interface BasicDataApiMasterDataBasicDataByIDsExportRequest
 */
export interface BasicDataApiMasterDataBasicDataByIDsExportRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof BasicDataApiMasterDataBasicDataByIDsExport
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for masterDataBasicDataByIDsList operation in BasicDataApi.
 * @export
 * @interface BasicDataApiMasterDataBasicDataByIDsListRequest
 */
export interface BasicDataApiMasterDataBasicDataByIDsListRequest {
    /**
     * 多个主键
     * @type {IDsInput}
     * @memberof BasicDataApiMasterDataBasicDataByIDsList
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for masterDataBasicDataDelete operation in BasicDataApi.
 * @export
 * @interface BasicDataApiMasterDataBasicDataDeleteRequest
 */
export interface BasicDataApiMasterDataBasicDataDeleteRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof BasicDataApiMasterDataBasicDataDelete
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for masterDataBasicDataIdInfo operation in BasicDataApi.
 * @export
 * @interface BasicDataApiMasterDataBasicDataIdInfoRequest
 */
export interface BasicDataApiMasterDataBasicDataIdInfoRequest {
    /**
     * 主键
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataIdInfo
     */
    readonly id: string
}

/**
 * Request parameters for masterDataBasicDataOdataAll operation in BasicDataApi.
 * @export
 * @interface BasicDataApiMasterDataBasicDataOdataAllRequest
 */
export interface BasicDataApiMasterDataBasicDataOdataAllRequest {
    /**
     * $filter
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataAll
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataAll
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataAll
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataAll
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataAll
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataAll
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataAll
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataAll
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataAll
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataAll
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataAll
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for masterDataBasicDataOdataExport operation in BasicDataApi.
 * @export
 * @interface BasicDataApiMasterDataBasicDataOdataExportRequest
 */
export interface BasicDataApiMasterDataBasicDataOdataExportRequest {
    /**
     * $filter
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataExport
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataExport
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataExport
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataExport
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataExport
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataExport
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataExport
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataExport
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataExport
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataExport
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDataOdataExport
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for masterDataBasicDataPageAll operation in BasicDataApi.
 * @export
 * @interface BasicDataApiMasterDataBasicDataPageAllRequest
 */
export interface BasicDataApiMasterDataBasicDataPageAllRequest {
    /**
     * 
     * @type {PageInputBase}
     * @memberof BasicDataApiMasterDataBasicDataPageAll
     */
    readonly pageInputBase?: PageInputBase
}

/**
 * Request parameters for masterDataBasicDataSave operation in BasicDataApi.
 * @export
 * @interface BasicDataApiMasterDataBasicDataSaveRequest
 */
export interface BasicDataApiMasterDataBasicDataSaveRequest {
    /**
     * 
     * @type {BasicDataInput}
     * @memberof BasicDataApiMasterDataBasicDataSave
     */
    readonly basicDataInput?: BasicDataInput
}

/**
 * Request parameters for masterDataBasicDatadataTypeList operation in BasicDataApi.
 * @export
 * @interface BasicDataApiMasterDataBasicDatadataTypeListRequest
 */
export interface BasicDataApiMasterDataBasicDatadataTypeListRequest {
    /**
     * 主键
     * @type {string}
     * @memberof BasicDataApiMasterDataBasicDatadataTypeList
     */
    readonly dataType: string
}

/**
 * BasicDataApi - object-oriented interface
 * @export
 * @class BasicDataApi
 * @extends {BaseAPI}
 */
export class BasicDataApi extends BaseAPI {
    /**
     * 
     * @summary 勾选部分Excel导出
     * @param {BasicDataApiMasterDataBasicDataByIDsExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicDataApi
     */
    public masterDataBasicDataByIDsExport(requestParameters: BasicDataApiMasterDataBasicDataByIDsExportRequest = {}, options?: any) {
        return BasicDataApiFp(this.configuration).masterDataBasicDataByIDsExport(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据多个ID查询对象集合
     * @param {BasicDataApiMasterDataBasicDataByIDsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicDataApi
     */
    public masterDataBasicDataByIDsList(requestParameters: BasicDataApiMasterDataBasicDataByIDsListRequest = {}, options?: any) {
        return BasicDataApiFp(this.configuration).masterDataBasicDataByIDsList(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取DataType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicDataApi
     */
    public masterDataBasicDataDataTypes(options?: any) {
        return BasicDataApiFp(this.configuration).masterDataBasicDataDataTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除
     * @param {BasicDataApiMasterDataBasicDataDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicDataApi
     */
    public masterDataBasicDataDelete(requestParameters: BasicDataApiMasterDataBasicDataDeleteRequest = {}, options?: any) {
        return BasicDataApiFp(this.configuration).masterDataBasicDataDelete(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据ID查询对象
     * @param {BasicDataApiMasterDataBasicDataIdInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicDataApi
     */
    public masterDataBasicDataIdInfo(requestParameters: BasicDataApiMasterDataBasicDataIdInfoRequest, options?: any) {
        return BasicDataApiFp(this.configuration).masterDataBasicDataIdInfo(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Odata 查询
     * @param {BasicDataApiMasterDataBasicDataOdataAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicDataApi
     */
    public masterDataBasicDataOdataAll(requestParameters: BasicDataApiMasterDataBasicDataOdataAllRequest = {}, options?: any) {
        return BasicDataApiFp(this.configuration).masterDataBasicDataOdataAll(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary [Odata]Excel导出
     * @param {BasicDataApiMasterDataBasicDataOdataExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicDataApi
     */
    public masterDataBasicDataOdataExport(requestParameters: BasicDataApiMasterDataBasicDataOdataExportRequest = {}, options?: any) {
        return BasicDataApiFp(this.configuration).masterDataBasicDataOdataExport(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 数据库 分页查询
     * @param {BasicDataApiMasterDataBasicDataPageAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicDataApi
     */
    public masterDataBasicDataPageAll(requestParameters: BasicDataApiMasterDataBasicDataPageAllRequest = {}, options?: any) {
        return BasicDataApiFp(this.configuration).masterDataBasicDataPageAll(requestParameters.pageInputBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 增加和修改
     * @param {BasicDataApiMasterDataBasicDataSaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicDataApi
     */
    public masterDataBasicDataSave(requestParameters: BasicDataApiMasterDataBasicDataSaveRequest = {}, options?: any) {
        return BasicDataApiFp(this.configuration).masterDataBasicDataSave(requestParameters.basicDataInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据DataType查询集合
     * @param {BasicDataApiMasterDataBasicDatadataTypeListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicDataApi
     */
    public masterDataBasicDatadataTypeList(requestParameters: BasicDataApiMasterDataBasicDatadataTypeListRequest, options?: any) {
        return BasicDataApiFp(this.configuration).masterDataBasicDatadataTypeList(requestParameters.dataType, options).then((request) => request(this.axios, this.basePath));
    }
}
