/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IDsInput } from '../models';
// @ts-ignore
import { QueryConditionInput } from '../models';
// @ts-ignore
import { QueryConditionTree } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataIQueryableSysQueryConditionOutput } from '../models';
// @ts-ignore
import { ResultDataIQueryableSysQueryConfigOutput } from '../models';
// @ts-ignore
import { ResultDataListColumnTypeOutput } from '../models';
// @ts-ignore
import { ResultDataListObject } from '../models';
// @ts-ignore
import { ResultDataListSysQueryConditionOutput } from '../models';
// @ts-ignore
import { ResultDataPageDataTableResult } from '../models';
// @ts-ignore
import { ResultDataQueryConditionTree } from '../models';
// @ts-ignore
import { ResultDataSysQueryConfigOutput } from '../models';
// @ts-ignore
import { SysQueryConditionCodeInput } from '../models';
// @ts-ignore
import { SysQueryConditionInput } from '../models';
// @ts-ignore
import { SysQueryConfigInput } from '../models';
/**
 * SysQueryConfigApi - axios parameter creator
 * @export
 */
export const SysQueryConfigApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取全部查询参数数据[Odata]
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryConditionOdataall: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Pharmacist/Query/Condition/Odata/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据Code取得保存的查询条件(药师编号(不为空查询当前药师))
         * @param {SysQueryConditionCodeInput} [sysQueryConditionCodeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryConditioncode: async (sysQueryConditionCodeInput?: SysQueryConditionCodeInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Pharmacist/Query/Condition/code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sysQueryConditionCodeInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除用户保存的查询内容
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryConditiondelete: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Pharmacist/Query/Condition/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 保存当前查询参数
         * @param {SysQueryConditionInput} [sysQueryConditionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryConditionsave: async (sysQueryConditionInput?: SysQueryConditionInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Pharmacist/Query/Condition/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sysQueryConditionInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取全部查询配置数据[Odata]
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryConfigOdataall: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Pharmacist/Query/Config/Odata/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询配置删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryConfigdelete: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Pharmacist/Query/Config/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据Code取得查询配置
         * @param {string} queryConfigCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryConfigqueryConfigCode: async (queryConfigCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryConfigCode' is not null or undefined
            assertParamExists('pharmacistQueryConfigqueryConfigCode', 'queryConfigCode', queryConfigCode)
            const localVarPath = `/Pharmacist/Query/Config/{queryConfigCode}`
                .replace(`{${"queryConfigCode"}}`, encodeURIComponent(String(queryConfigCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询配置保存
         * @param {SysQueryConfigInput} [sysQueryConfigInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryConfigsave: async (sysQueryConfigInput?: SysQueryConfigInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Pharmacist/Query/Config/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sysQueryConfigInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据表,视图名称获取字段及类型
         * @param {string} tableName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryConfigtableNameGetColumns: async (tableName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tableName' is not null or undefined
            assertParamExists('pharmacistQueryConfigtableNameGetColumns', 'tableName', tableName)
            const localVarPath = `/Pharmacist/Query/Config/{tableName}/GetColumns`
                .replace(`{${"tableName"}}`, encodeURIComponent(String(tableName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 测试
         * @param {string} [queryConfigCode] 
         * @param {QueryConditionTree} [queryConditionTree] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryGetPagetestPageall: async (queryConfigCode?: string, queryConditionTree?: QueryConditionTree, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/Pharmacist/Query/GetPagetest/Page/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (queryConfigCode !== undefined) {
                localVarQueryParameter['queryConfigCode'] = queryConfigCode;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryConditionTree, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据配置获取分页数据
         * @param {string} queryConfigCode 
         * @param {QueryConditionInput} [queryConditionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryqueryConfigCodePageall: async (queryConfigCode: string, queryConditionInput?: QueryConditionInput, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryConfigCode' is not null or undefined
            assertParamExists('pharmacistQueryqueryConfigCodePageall', 'queryConfigCode', queryConfigCode)
            const localVarPath = `/Pharmacist/Query/{queryConfigCode}/Page/all`
                .replace(`{${"queryConfigCode"}}`, encodeURIComponent(String(queryConfigCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryConditionInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据配置获取全部数据
         * @param {string} queryConfigCode 
         * @param {QueryConditionInput} [queryConditionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryqueryConfigCodeall: async (queryConfigCode: string, queryConditionInput?: QueryConditionInput, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'queryConfigCode' is not null or undefined
            assertParamExists('pharmacistQueryqueryConfigCodeall', 'queryConfigCode', queryConfigCode)
            const localVarPath = `/Pharmacist/Query/{queryConfigCode}/all`
                .replace(`{${"queryConfigCode"}}`, encodeURIComponent(String(queryConfigCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryConditionInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SysQueryConfigApi - functional programming interface
 * @export
 */
export const SysQueryConfigApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SysQueryConfigApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 获取全部查询参数数据[Odata]
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pharmacistQueryConditionOdataall(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableSysQueryConditionOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pharmacistQueryConditionOdataall(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据Code取得保存的查询条件(药师编号(不为空查询当前药师))
         * @param {SysQueryConditionCodeInput} [sysQueryConditionCodeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pharmacistQueryConditioncode(sysQueryConditionCodeInput?: SysQueryConditionCodeInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListSysQueryConditionOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pharmacistQueryConditioncode(sysQueryConditionCodeInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 删除用户保存的查询内容
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pharmacistQueryConditiondelete(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pharmacistQueryConditiondelete(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 保存当前查询参数
         * @param {SysQueryConditionInput} [sysQueryConditionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pharmacistQueryConditionsave(sysQueryConditionInput?: SysQueryConditionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pharmacistQueryConditionsave(sysQueryConditionInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取全部查询配置数据[Odata]
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pharmacistQueryConfigOdataall(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableSysQueryConfigOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pharmacistQueryConfigOdataall(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 查询配置删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pharmacistQueryConfigdelete(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pharmacistQueryConfigdelete(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据Code取得查询配置
         * @param {string} queryConfigCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pharmacistQueryConfigqueryConfigCode(queryConfigCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataSysQueryConfigOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pharmacistQueryConfigqueryConfigCode(queryConfigCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 查询配置保存
         * @param {SysQueryConfigInput} [sysQueryConfigInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pharmacistQueryConfigsave(sysQueryConfigInput?: SysQueryConfigInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pharmacistQueryConfigsave(sysQueryConfigInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据表,视图名称获取字段及类型
         * @param {string} tableName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pharmacistQueryConfigtableNameGetColumns(tableName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListColumnTypeOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pharmacistQueryConfigtableNameGetColumns(tableName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 测试
         * @param {string} [queryConfigCode] 
         * @param {QueryConditionTree} [queryConditionTree] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pharmacistQueryGetPagetestPageall(queryConfigCode?: string, queryConditionTree?: QueryConditionTree, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataQueryConditionTree>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pharmacistQueryGetPagetestPageall(queryConfigCode, queryConditionTree, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据配置获取分页数据
         * @param {string} queryConfigCode 
         * @param {QueryConditionInput} [queryConditionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pharmacistQueryqueryConfigCodePageall(queryConfigCode: string, queryConditionInput?: QueryConditionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataPageDataTableResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pharmacistQueryqueryConfigCodePageall(queryConfigCode, queryConditionInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据配置获取全部数据
         * @param {string} queryConfigCode 
         * @param {QueryConditionInput} [queryConditionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pharmacistQueryqueryConfigCodeall(queryConfigCode: string, queryConditionInput?: QueryConditionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pharmacistQueryqueryConfigCodeall(queryConfigCode, queryConditionInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SysQueryConfigApi - factory interface
 * @export
 */
export const SysQueryConfigApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SysQueryConfigApiFp(configuration)
    return {
        /**
         * 
         * @summary 获取全部查询参数数据[Odata]
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryConditionOdataall(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableSysQueryConditionOutput> {
            return localVarFp.pharmacistQueryConditionOdataall(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据Code取得保存的查询条件(药师编号(不为空查询当前药师))
         * @param {SysQueryConditionCodeInput} [sysQueryConditionCodeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryConditioncode(sysQueryConditionCodeInput?: SysQueryConditionCodeInput, options?: any): AxiosPromise<ResultDataListSysQueryConditionOutput> {
            return localVarFp.pharmacistQueryConditioncode(sysQueryConditionCodeInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除用户保存的查询内容
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryConditiondelete(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.pharmacistQueryConditiondelete(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 保存当前查询参数
         * @param {SysQueryConditionInput} [sysQueryConditionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryConditionsave(sysQueryConditionInput?: SysQueryConditionInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.pharmacistQueryConditionsave(sysQueryConditionInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取全部查询配置数据[Odata]
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryConfigOdataall(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableSysQueryConfigOutput> {
            return localVarFp.pharmacistQueryConfigOdataall(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询配置删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryConfigdelete(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.pharmacistQueryConfigdelete(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据Code取得查询配置
         * @param {string} queryConfigCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryConfigqueryConfigCode(queryConfigCode: string, options?: any): AxiosPromise<ResultDataSysQueryConfigOutput> {
            return localVarFp.pharmacistQueryConfigqueryConfigCode(queryConfigCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询配置保存
         * @param {SysQueryConfigInput} [sysQueryConfigInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryConfigsave(sysQueryConfigInput?: SysQueryConfigInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.pharmacistQueryConfigsave(sysQueryConfigInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据表,视图名称获取字段及类型
         * @param {string} tableName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryConfigtableNameGetColumns(tableName: string, options?: any): AxiosPromise<ResultDataListColumnTypeOutput> {
            return localVarFp.pharmacistQueryConfigtableNameGetColumns(tableName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 测试
         * @param {string} [queryConfigCode] 
         * @param {QueryConditionTree} [queryConditionTree] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryGetPagetestPageall(queryConfigCode?: string, queryConditionTree?: QueryConditionTree, options?: any): AxiosPromise<ResultDataQueryConditionTree> {
            return localVarFp.pharmacistQueryGetPagetestPageall(queryConfigCode, queryConditionTree, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据配置获取分页数据
         * @param {string} queryConfigCode 
         * @param {QueryConditionInput} [queryConditionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryqueryConfigCodePageall(queryConfigCode: string, queryConditionInput?: QueryConditionInput, options?: any): AxiosPromise<ResultDataPageDataTableResult> {
            return localVarFp.pharmacistQueryqueryConfigCodePageall(queryConfigCode, queryConditionInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据配置获取全部数据
         * @param {string} queryConfigCode 
         * @param {QueryConditionInput} [queryConditionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pharmacistQueryqueryConfigCodeall(queryConfigCode: string, queryConditionInput?: QueryConditionInput, options?: any): AxiosPromise<ResultDataListObject> {
            return localVarFp.pharmacistQueryqueryConfigCodeall(queryConfigCode, queryConditionInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for pharmacistQueryConditionOdataall operation in SysQueryConfigApi.
 * @export
 * @interface SysQueryConfigApiPharmacistQueryConditionOdataallRequest
 */
export interface SysQueryConfigApiPharmacistQueryConditionOdataallRequest {
    /**
     * $filter
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConditionOdataall
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConditionOdataall
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConditionOdataall
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConditionOdataall
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConditionOdataall
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConditionOdataall
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConditionOdataall
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConditionOdataall
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConditionOdataall
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConditionOdataall
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConditionOdataall
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for pharmacistQueryConditioncode operation in SysQueryConfigApi.
 * @export
 * @interface SysQueryConfigApiPharmacistQueryConditioncodeRequest
 */
export interface SysQueryConfigApiPharmacistQueryConditioncodeRequest {
    /**
     * 
     * @type {SysQueryConditionCodeInput}
     * @memberof SysQueryConfigApiPharmacistQueryConditioncode
     */
    readonly sysQueryConditionCodeInput?: SysQueryConditionCodeInput
}

/**
 * Request parameters for pharmacistQueryConditiondelete operation in SysQueryConfigApi.
 * @export
 * @interface SysQueryConfigApiPharmacistQueryConditiondeleteRequest
 */
export interface SysQueryConfigApiPharmacistQueryConditiondeleteRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof SysQueryConfigApiPharmacistQueryConditiondelete
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for pharmacistQueryConditionsave operation in SysQueryConfigApi.
 * @export
 * @interface SysQueryConfigApiPharmacistQueryConditionsaveRequest
 */
export interface SysQueryConfigApiPharmacistQueryConditionsaveRequest {
    /**
     * 
     * @type {SysQueryConditionInput}
     * @memberof SysQueryConfigApiPharmacistQueryConditionsave
     */
    readonly sysQueryConditionInput?: SysQueryConditionInput
}

/**
 * Request parameters for pharmacistQueryConfigOdataall operation in SysQueryConfigApi.
 * @export
 * @interface SysQueryConfigApiPharmacistQueryConfigOdataallRequest
 */
export interface SysQueryConfigApiPharmacistQueryConfigOdataallRequest {
    /**
     * $filter
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConfigOdataall
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConfigOdataall
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConfigOdataall
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConfigOdataall
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConfigOdataall
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConfigOdataall
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConfigOdataall
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConfigOdataall
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConfigOdataall
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConfigOdataall
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConfigOdataall
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for pharmacistQueryConfigdelete operation in SysQueryConfigApi.
 * @export
 * @interface SysQueryConfigApiPharmacistQueryConfigdeleteRequest
 */
export interface SysQueryConfigApiPharmacistQueryConfigdeleteRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof SysQueryConfigApiPharmacistQueryConfigdelete
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for pharmacistQueryConfigqueryConfigCode operation in SysQueryConfigApi.
 * @export
 * @interface SysQueryConfigApiPharmacistQueryConfigqueryConfigCodeRequest
 */
export interface SysQueryConfigApiPharmacistQueryConfigqueryConfigCodeRequest {
    /**
     * 
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConfigqueryConfigCode
     */
    readonly queryConfigCode: string
}

/**
 * Request parameters for pharmacistQueryConfigsave operation in SysQueryConfigApi.
 * @export
 * @interface SysQueryConfigApiPharmacistQueryConfigsaveRequest
 */
export interface SysQueryConfigApiPharmacistQueryConfigsaveRequest {
    /**
     * 
     * @type {SysQueryConfigInput}
     * @memberof SysQueryConfigApiPharmacistQueryConfigsave
     */
    readonly sysQueryConfigInput?: SysQueryConfigInput
}

/**
 * Request parameters for pharmacistQueryConfigtableNameGetColumns operation in SysQueryConfigApi.
 * @export
 * @interface SysQueryConfigApiPharmacistQueryConfigtableNameGetColumnsRequest
 */
export interface SysQueryConfigApiPharmacistQueryConfigtableNameGetColumnsRequest {
    /**
     * 
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryConfigtableNameGetColumns
     */
    readonly tableName: string
}

/**
 * Request parameters for pharmacistQueryGetPagetestPageall operation in SysQueryConfigApi.
 * @export
 * @interface SysQueryConfigApiPharmacistQueryGetPagetestPageallRequest
 */
export interface SysQueryConfigApiPharmacistQueryGetPagetestPageallRequest {
    /**
     * 
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryGetPagetestPageall
     */
    readonly queryConfigCode?: string

    /**
     * 
     * @type {QueryConditionTree}
     * @memberof SysQueryConfigApiPharmacistQueryGetPagetestPageall
     */
    readonly queryConditionTree?: QueryConditionTree
}

/**
 * Request parameters for pharmacistQueryqueryConfigCodePageall operation in SysQueryConfigApi.
 * @export
 * @interface SysQueryConfigApiPharmacistQueryqueryConfigCodePageallRequest
 */
export interface SysQueryConfigApiPharmacistQueryqueryConfigCodePageallRequest {
    /**
     * 
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryqueryConfigCodePageall
     */
    readonly queryConfigCode: string

    /**
     * 
     * @type {QueryConditionInput}
     * @memberof SysQueryConfigApiPharmacistQueryqueryConfigCodePageall
     */
    readonly queryConditionInput?: QueryConditionInput
}

/**
 * Request parameters for pharmacistQueryqueryConfigCodeall operation in SysQueryConfigApi.
 * @export
 * @interface SysQueryConfigApiPharmacistQueryqueryConfigCodeallRequest
 */
export interface SysQueryConfigApiPharmacistQueryqueryConfigCodeallRequest {
    /**
     * 
     * @type {string}
     * @memberof SysQueryConfigApiPharmacistQueryqueryConfigCodeall
     */
    readonly queryConfigCode: string

    /**
     * 
     * @type {QueryConditionInput}
     * @memberof SysQueryConfigApiPharmacistQueryqueryConfigCodeall
     */
    readonly queryConditionInput?: QueryConditionInput
}

/**
 * SysQueryConfigApi - object-oriented interface
 * @export
 * @class SysQueryConfigApi
 * @extends {BaseAPI}
 */
export class SysQueryConfigApi extends BaseAPI {
    /**
     * 
     * @summary 获取全部查询参数数据[Odata]
     * @param {SysQueryConfigApiPharmacistQueryConditionOdataallRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysQueryConfigApi
     */
    public pharmacistQueryConditionOdataall(requestParameters: SysQueryConfigApiPharmacistQueryConditionOdataallRequest = {}, options?: any) {
        return SysQueryConfigApiFp(this.configuration).pharmacistQueryConditionOdataall(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据Code取得保存的查询条件(药师编号(不为空查询当前药师))
     * @param {SysQueryConfigApiPharmacistQueryConditioncodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysQueryConfigApi
     */
    public pharmacistQueryConditioncode(requestParameters: SysQueryConfigApiPharmacistQueryConditioncodeRequest = {}, options?: any) {
        return SysQueryConfigApiFp(this.configuration).pharmacistQueryConditioncode(requestParameters.sysQueryConditionCodeInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除用户保存的查询内容
     * @param {SysQueryConfigApiPharmacistQueryConditiondeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysQueryConfigApi
     */
    public pharmacistQueryConditiondelete(requestParameters: SysQueryConfigApiPharmacistQueryConditiondeleteRequest = {}, options?: any) {
        return SysQueryConfigApiFp(this.configuration).pharmacistQueryConditiondelete(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 保存当前查询参数
     * @param {SysQueryConfigApiPharmacistQueryConditionsaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysQueryConfigApi
     */
    public pharmacistQueryConditionsave(requestParameters: SysQueryConfigApiPharmacistQueryConditionsaveRequest = {}, options?: any) {
        return SysQueryConfigApiFp(this.configuration).pharmacistQueryConditionsave(requestParameters.sysQueryConditionInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取全部查询配置数据[Odata]
     * @param {SysQueryConfigApiPharmacistQueryConfigOdataallRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysQueryConfigApi
     */
    public pharmacistQueryConfigOdataall(requestParameters: SysQueryConfigApiPharmacistQueryConfigOdataallRequest = {}, options?: any) {
        return SysQueryConfigApiFp(this.configuration).pharmacistQueryConfigOdataall(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询配置删除
     * @param {SysQueryConfigApiPharmacistQueryConfigdeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysQueryConfigApi
     */
    public pharmacistQueryConfigdelete(requestParameters: SysQueryConfigApiPharmacistQueryConfigdeleteRequest = {}, options?: any) {
        return SysQueryConfigApiFp(this.configuration).pharmacistQueryConfigdelete(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据Code取得查询配置
     * @param {SysQueryConfigApiPharmacistQueryConfigqueryConfigCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysQueryConfigApi
     */
    public pharmacistQueryConfigqueryConfigCode(requestParameters: SysQueryConfigApiPharmacistQueryConfigqueryConfigCodeRequest, options?: any) {
        return SysQueryConfigApiFp(this.configuration).pharmacistQueryConfigqueryConfigCode(requestParameters.queryConfigCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询配置保存
     * @param {SysQueryConfigApiPharmacistQueryConfigsaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysQueryConfigApi
     */
    public pharmacistQueryConfigsave(requestParameters: SysQueryConfigApiPharmacistQueryConfigsaveRequest = {}, options?: any) {
        return SysQueryConfigApiFp(this.configuration).pharmacistQueryConfigsave(requestParameters.sysQueryConfigInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据表,视图名称获取字段及类型
     * @param {SysQueryConfigApiPharmacistQueryConfigtableNameGetColumnsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysQueryConfigApi
     */
    public pharmacistQueryConfigtableNameGetColumns(requestParameters: SysQueryConfigApiPharmacistQueryConfigtableNameGetColumnsRequest, options?: any) {
        return SysQueryConfigApiFp(this.configuration).pharmacistQueryConfigtableNameGetColumns(requestParameters.tableName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 测试
     * @param {SysQueryConfigApiPharmacistQueryGetPagetestPageallRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysQueryConfigApi
     */
    public pharmacistQueryGetPagetestPageall(requestParameters: SysQueryConfigApiPharmacistQueryGetPagetestPageallRequest = {}, options?: any) {
        return SysQueryConfigApiFp(this.configuration).pharmacistQueryGetPagetestPageall(requestParameters.queryConfigCode, requestParameters.queryConditionTree, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据配置获取分页数据
     * @param {SysQueryConfigApiPharmacistQueryqueryConfigCodePageallRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysQueryConfigApi
     */
    public pharmacistQueryqueryConfigCodePageall(requestParameters: SysQueryConfigApiPharmacistQueryqueryConfigCodePageallRequest, options?: any) {
        return SysQueryConfigApiFp(this.configuration).pharmacistQueryqueryConfigCodePageall(requestParameters.queryConfigCode, requestParameters.queryConditionInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据配置获取全部数据
     * @param {SysQueryConfigApiPharmacistQueryqueryConfigCodeallRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysQueryConfigApi
     */
    public pharmacistQueryqueryConfigCodeall(requestParameters: SysQueryConfigApiPharmacistQueryqueryConfigCodeallRequest, options?: any) {
        return SysQueryConfigApiFp(this.configuration).pharmacistQueryqueryConfigCodeall(requestParameters.queryConfigCode, requestParameters.queryConditionInput, options).then((request) => request(this.axios, this.basePath));
    }
}
