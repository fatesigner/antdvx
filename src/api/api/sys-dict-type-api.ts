/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddDictTypeInput } from '../models';
// @ts-ignore
import { ChangeStateDictTypeInput } from '../models';
// @ts-ignore
import { DeleteDictTypeInput } from '../models';
// @ts-ignore
import { DictTypePageInput } from '../models';
// @ts-ignore
import { DropDownDictTypeInput } from '../models';
// @ts-ignore
import { QueryDictTypeInfoInput } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataIQueryableSysDictType } from '../models';
// @ts-ignore
import { ResultDataListSysDictData } from '../models';
// @ts-ignore
import { ResultDataPageResultSysDictType } from '../models';
// @ts-ignore
import { ResultDataSysDictType } from '../models';
// @ts-ignore
import { UpdateDictTypeInput } from '../models';
/**
 * SysDictTypeApi - axios parameter creator
 * @export
 */
export const SysDictTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Odata获取字典类型列表
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictTypeOdataAll: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysDictType/Odata/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 添加字典类型
         * @param {AddDictTypeInput} [addDictTypeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictTypeadd: async (addDictTypeInput?: AddDictTypeInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysDictType/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addDictTypeInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新字典类型状态
         * @param {ChangeStateDictTypeInput} [changeStateDictTypeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictTypechangeStatus: async (changeStateDictTypeInput?: ChangeStateDictTypeInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysDictType/changeStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeStateDictTypeInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除字典类型
         * @param {DeleteDictTypeInput} [deleteDictTypeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictTypedelete: async (deleteDictTypeInput?: DeleteDictTypeInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysDictType/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteDictTypeInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 字典类型详情
         * @param {QueryDictTypeInfoInput} [queryDictTypeInfoInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictTypedetail: async (queryDictTypeInfoInput?: QueryDictTypeInfoInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysDictType/detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(queryDictTypeInfoInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取字典类型下所有字典值
         * @param {DropDownDictTypeInput} [dropDownDictTypeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictTypedropDown: async (dropDownDictTypeInput?: DropDownDictTypeInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysDictType/dropDown`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dropDownDictTypeInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新字典类型
         * @param {UpdateDictTypeInput} [updateDictTypeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictTypeedit: async (updateDictTypeInput?: UpdateDictTypeInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysDictType/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDictTypeInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取字典类型列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictTypelist: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysDictType/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 分页查询字典类型
         * @param {DictTypePageInput} [dictTypePageInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictTypepage: async (dictTypePageInput?: DictTypePageInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sysDictType/page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dictTypePageInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SysDictTypeApi - functional programming interface
 * @export
 */
export const SysDictTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SysDictTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Odata获取字典类型列表
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysDictTypeOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableSysDictType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysDictTypeOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 添加字典类型
         * @param {AddDictTypeInput} [addDictTypeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysDictTypeadd(addDictTypeInput?: AddDictTypeInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysDictTypeadd(addDictTypeInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 更新字典类型状态
         * @param {ChangeStateDictTypeInput} [changeStateDictTypeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysDictTypechangeStatus(changeStateDictTypeInput?: ChangeStateDictTypeInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysDictTypechangeStatus(changeStateDictTypeInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 删除字典类型
         * @param {DeleteDictTypeInput} [deleteDictTypeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysDictTypedelete(deleteDictTypeInput?: DeleteDictTypeInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysDictTypedelete(deleteDictTypeInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 字典类型详情
         * @param {QueryDictTypeInfoInput} [queryDictTypeInfoInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysDictTypedetail(queryDictTypeInfoInput?: QueryDictTypeInfoInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataSysDictType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysDictTypedetail(queryDictTypeInfoInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取字典类型下所有字典值
         * @param {DropDownDictTypeInput} [dropDownDictTypeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysDictTypedropDown(dropDownDictTypeInput?: DropDownDictTypeInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListSysDictData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysDictTypedropDown(dropDownDictTypeInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 更新字典类型
         * @param {UpdateDictTypeInput} [updateDictTypeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysDictTypeedit(updateDictTypeInput?: UpdateDictTypeInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysDictTypeedit(updateDictTypeInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取字典类型列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysDictTypelist(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableSysDictType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysDictTypelist(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 分页查询字典类型
         * @param {DictTypePageInput} [dictTypePageInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysDictTypepage(dictTypePageInput?: DictTypePageInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataPageResultSysDictType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysDictTypepage(dictTypePageInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SysDictTypeApi - factory interface
 * @export
 */
export const SysDictTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SysDictTypeApiFp(configuration)
    return {
        /**
         * 
         * @summary Odata获取字典类型列表
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictTypeOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableSysDictType> {
            return localVarFp.sysDictTypeOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 添加字典类型
         * @param {AddDictTypeInput} [addDictTypeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictTypeadd(addDictTypeInput?: AddDictTypeInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.sysDictTypeadd(addDictTypeInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新字典类型状态
         * @param {ChangeStateDictTypeInput} [changeStateDictTypeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictTypechangeStatus(changeStateDictTypeInput?: ChangeStateDictTypeInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.sysDictTypechangeStatus(changeStateDictTypeInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除字典类型
         * @param {DeleteDictTypeInput} [deleteDictTypeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictTypedelete(deleteDictTypeInput?: DeleteDictTypeInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.sysDictTypedelete(deleteDictTypeInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 字典类型详情
         * @param {QueryDictTypeInfoInput} [queryDictTypeInfoInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictTypedetail(queryDictTypeInfoInput?: QueryDictTypeInfoInput, options?: any): AxiosPromise<ResultDataSysDictType> {
            return localVarFp.sysDictTypedetail(queryDictTypeInfoInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取字典类型下所有字典值
         * @param {DropDownDictTypeInput} [dropDownDictTypeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictTypedropDown(dropDownDictTypeInput?: DropDownDictTypeInput, options?: any): AxiosPromise<ResultDataListSysDictData> {
            return localVarFp.sysDictTypedropDown(dropDownDictTypeInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新字典类型
         * @param {UpdateDictTypeInput} [updateDictTypeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictTypeedit(updateDictTypeInput?: UpdateDictTypeInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.sysDictTypeedit(updateDictTypeInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取字典类型列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictTypelist(options?: any): AxiosPromise<ResultDataIQueryableSysDictType> {
            return localVarFp.sysDictTypelist(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 分页查询字典类型
         * @param {DictTypePageInput} [dictTypePageInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysDictTypepage(dictTypePageInput?: DictTypePageInput, options?: any): AxiosPromise<ResultDataPageResultSysDictType> {
            return localVarFp.sysDictTypepage(dictTypePageInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for sysDictTypeOdataAll operation in SysDictTypeApi.
 * @export
 * @interface SysDictTypeApiSysDictTypeOdataAllRequest
 */
export interface SysDictTypeApiSysDictTypeOdataAllRequest {
    /**
     * $filter
     * @type {string}
     * @memberof SysDictTypeApiSysDictTypeOdataAll
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof SysDictTypeApiSysDictTypeOdataAll
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof SysDictTypeApiSysDictTypeOdataAll
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof SysDictTypeApiSysDictTypeOdataAll
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof SysDictTypeApiSysDictTypeOdataAll
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof SysDictTypeApiSysDictTypeOdataAll
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof SysDictTypeApiSysDictTypeOdataAll
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof SysDictTypeApiSysDictTypeOdataAll
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof SysDictTypeApiSysDictTypeOdataAll
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof SysDictTypeApiSysDictTypeOdataAll
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof SysDictTypeApiSysDictTypeOdataAll
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for sysDictTypeadd operation in SysDictTypeApi.
 * @export
 * @interface SysDictTypeApiSysDictTypeaddRequest
 */
export interface SysDictTypeApiSysDictTypeaddRequest {
    /**
     * 
     * @type {AddDictTypeInput}
     * @memberof SysDictTypeApiSysDictTypeadd
     */
    readonly addDictTypeInput?: AddDictTypeInput
}

/**
 * Request parameters for sysDictTypechangeStatus operation in SysDictTypeApi.
 * @export
 * @interface SysDictTypeApiSysDictTypechangeStatusRequest
 */
export interface SysDictTypeApiSysDictTypechangeStatusRequest {
    /**
     * 
     * @type {ChangeStateDictTypeInput}
     * @memberof SysDictTypeApiSysDictTypechangeStatus
     */
    readonly changeStateDictTypeInput?: ChangeStateDictTypeInput
}

/**
 * Request parameters for sysDictTypedelete operation in SysDictTypeApi.
 * @export
 * @interface SysDictTypeApiSysDictTypedeleteRequest
 */
export interface SysDictTypeApiSysDictTypedeleteRequest {
    /**
     * 
     * @type {DeleteDictTypeInput}
     * @memberof SysDictTypeApiSysDictTypedelete
     */
    readonly deleteDictTypeInput?: DeleteDictTypeInput
}

/**
 * Request parameters for sysDictTypedetail operation in SysDictTypeApi.
 * @export
 * @interface SysDictTypeApiSysDictTypedetailRequest
 */
export interface SysDictTypeApiSysDictTypedetailRequest {
    /**
     * 
     * @type {QueryDictTypeInfoInput}
     * @memberof SysDictTypeApiSysDictTypedetail
     */
    readonly queryDictTypeInfoInput?: QueryDictTypeInfoInput
}

/**
 * Request parameters for sysDictTypedropDown operation in SysDictTypeApi.
 * @export
 * @interface SysDictTypeApiSysDictTypedropDownRequest
 */
export interface SysDictTypeApiSysDictTypedropDownRequest {
    /**
     * 
     * @type {DropDownDictTypeInput}
     * @memberof SysDictTypeApiSysDictTypedropDown
     */
    readonly dropDownDictTypeInput?: DropDownDictTypeInput
}

/**
 * Request parameters for sysDictTypeedit operation in SysDictTypeApi.
 * @export
 * @interface SysDictTypeApiSysDictTypeeditRequest
 */
export interface SysDictTypeApiSysDictTypeeditRequest {
    /**
     * 
     * @type {UpdateDictTypeInput}
     * @memberof SysDictTypeApiSysDictTypeedit
     */
    readonly updateDictTypeInput?: UpdateDictTypeInput
}

/**
 * Request parameters for sysDictTypepage operation in SysDictTypeApi.
 * @export
 * @interface SysDictTypeApiSysDictTypepageRequest
 */
export interface SysDictTypeApiSysDictTypepageRequest {
    /**
     * 
     * @type {DictTypePageInput}
     * @memberof SysDictTypeApiSysDictTypepage
     */
    readonly dictTypePageInput?: DictTypePageInput
}

/**
 * SysDictTypeApi - object-oriented interface
 * @export
 * @class SysDictTypeApi
 * @extends {BaseAPI}
 */
export class SysDictTypeApi extends BaseAPI {
    /**
     * 
     * @summary Odata获取字典类型列表
     * @param {SysDictTypeApiSysDictTypeOdataAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDictTypeApi
     */
    public sysDictTypeOdataAll(requestParameters: SysDictTypeApiSysDictTypeOdataAllRequest = {}, options?: any) {
        return SysDictTypeApiFp(this.configuration).sysDictTypeOdataAll(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 添加字典类型
     * @param {SysDictTypeApiSysDictTypeaddRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDictTypeApi
     */
    public sysDictTypeadd(requestParameters: SysDictTypeApiSysDictTypeaddRequest = {}, options?: any) {
        return SysDictTypeApiFp(this.configuration).sysDictTypeadd(requestParameters.addDictTypeInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新字典类型状态
     * @param {SysDictTypeApiSysDictTypechangeStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDictTypeApi
     */
    public sysDictTypechangeStatus(requestParameters: SysDictTypeApiSysDictTypechangeStatusRequest = {}, options?: any) {
        return SysDictTypeApiFp(this.configuration).sysDictTypechangeStatus(requestParameters.changeStateDictTypeInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除字典类型
     * @param {SysDictTypeApiSysDictTypedeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDictTypeApi
     */
    public sysDictTypedelete(requestParameters: SysDictTypeApiSysDictTypedeleteRequest = {}, options?: any) {
        return SysDictTypeApiFp(this.configuration).sysDictTypedelete(requestParameters.deleteDictTypeInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 字典类型详情
     * @param {SysDictTypeApiSysDictTypedetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDictTypeApi
     */
    public sysDictTypedetail(requestParameters: SysDictTypeApiSysDictTypedetailRequest = {}, options?: any) {
        return SysDictTypeApiFp(this.configuration).sysDictTypedetail(requestParameters.queryDictTypeInfoInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取字典类型下所有字典值
     * @param {SysDictTypeApiSysDictTypedropDownRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDictTypeApi
     */
    public sysDictTypedropDown(requestParameters: SysDictTypeApiSysDictTypedropDownRequest = {}, options?: any) {
        return SysDictTypeApiFp(this.configuration).sysDictTypedropDown(requestParameters.dropDownDictTypeInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新字典类型
     * @param {SysDictTypeApiSysDictTypeeditRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDictTypeApi
     */
    public sysDictTypeedit(requestParameters: SysDictTypeApiSysDictTypeeditRequest = {}, options?: any) {
        return SysDictTypeApiFp(this.configuration).sysDictTypeedit(requestParameters.updateDictTypeInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取字典类型列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDictTypeApi
     */
    public sysDictTypelist(options?: any) {
        return SysDictTypeApiFp(this.configuration).sysDictTypelist(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 分页查询字典类型
     * @param {SysDictTypeApiSysDictTypepageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysDictTypeApi
     */
    public sysDictTypepage(requestParameters: SysDictTypeApiSysDictTypepageRequest = {}, options?: any) {
        return SysDictTypeApiFp(this.configuration).sysDictTypepage(requestParameters.dictTypePageInput, options).then((request) => request(this.axios, this.basePath));
    }
}
