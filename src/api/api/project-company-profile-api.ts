/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IDsInput } from '../models';
// @ts-ignore
import { PageInputBase } from '../models';
// @ts-ignore
import { ProjectCompanyProfileInput } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataFileContentResult } from '../models';
// @ts-ignore
import { ResultDataIQueryableProjectCompanyProfile } from '../models';
// @ts-ignore
import { ResultDataListProjectCompanyProfileOutput } from '../models';
// @ts-ignore
import { ResultDataPageResultProjectCompanyProfileOutput } from '../models';
// @ts-ignore
import { ResultDataProjectCompanyProfileOutput } from '../models';
/**
 * ProjectCompanyProfileApi - axios parameter creator
 * @export
 */
export const ProjectCompanyProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectCompanyProfileByIDsExport: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectCompanyProfile/ByIDs/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectCompanyProfileByIDsList: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectCompanyProfile/ByIDs/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectCompanyProfileDelete: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectCompanyProfile/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectCompanyProfileIdInfo: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectMasterDataProjectCompanyProfileIdInfo', 'id', id)
            const localVarPath = `/ProjectMasterData/ProjectCompanyProfile/{Id}/Info`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectCompanyProfileOdataAll: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectCompanyProfile/Odata/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectCompanyProfileOdataExport: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectCompanyProfile/Odata/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectCompanyProfilePageAll: async (pageInputBase?: PageInputBase, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectCompanyProfile/Page/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pageInputBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 增加和修改
         * @param {ProjectCompanyProfileInput} [projectCompanyProfileInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectCompanyProfileSave: async (projectCompanyProfileInput?: ProjectCompanyProfileInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectCompanyProfile/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectCompanyProfileInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectCompanyProfileApi - functional programming interface
 * @export
 */
export const ProjectCompanyProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectCompanyProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectCompanyProfileByIDsExport(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectCompanyProfileByIDsExport(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectCompanyProfileByIDsList(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListProjectCompanyProfileOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectCompanyProfileByIDsList(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectCompanyProfileDelete(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectCompanyProfileDelete(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectCompanyProfileIdInfo(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataProjectCompanyProfileOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectCompanyProfileIdInfo(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectCompanyProfileOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableProjectCompanyProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectCompanyProfileOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectCompanyProfileOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectCompanyProfileOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectCompanyProfilePageAll(pageInputBase?: PageInputBase, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataPageResultProjectCompanyProfileOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectCompanyProfilePageAll(pageInputBase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 增加和修改
         * @param {ProjectCompanyProfileInput} [projectCompanyProfileInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectCompanyProfileSave(projectCompanyProfileInput?: ProjectCompanyProfileInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectCompanyProfileSave(projectCompanyProfileInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectCompanyProfileApi - factory interface
 * @export
 */
export const ProjectCompanyProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectCompanyProfileApiFp(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectCompanyProfileByIDsExport(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.projectMasterDataProjectCompanyProfileByIDsExport(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectCompanyProfileByIDsList(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataListProjectCompanyProfileOutput> {
            return localVarFp.projectMasterDataProjectCompanyProfileByIDsList(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectCompanyProfileDelete(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.projectMasterDataProjectCompanyProfileDelete(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectCompanyProfileIdInfo(id: string, options?: any): AxiosPromise<ResultDataProjectCompanyProfileOutput> {
            return localVarFp.projectMasterDataProjectCompanyProfileIdInfo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectCompanyProfileOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableProjectCompanyProfile> {
            return localVarFp.projectMasterDataProjectCompanyProfileOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectCompanyProfileOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.projectMasterDataProjectCompanyProfileOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectCompanyProfilePageAll(pageInputBase?: PageInputBase, options?: any): AxiosPromise<ResultDataPageResultProjectCompanyProfileOutput> {
            return localVarFp.projectMasterDataProjectCompanyProfilePageAll(pageInputBase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 增加和修改
         * @param {ProjectCompanyProfileInput} [projectCompanyProfileInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectCompanyProfileSave(projectCompanyProfileInput?: ProjectCompanyProfileInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.projectMasterDataProjectCompanyProfileSave(projectCompanyProfileInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for projectMasterDataProjectCompanyProfileByIDsExport operation in ProjectCompanyProfileApi.
 * @export
 * @interface ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileByIDsExportRequest
 */
export interface ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileByIDsExportRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileByIDsExport
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for projectMasterDataProjectCompanyProfileByIDsList operation in ProjectCompanyProfileApi.
 * @export
 * @interface ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileByIDsListRequest
 */
export interface ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileByIDsListRequest {
    /**
     * 多个主键
     * @type {IDsInput}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileByIDsList
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for projectMasterDataProjectCompanyProfileDelete operation in ProjectCompanyProfileApi.
 * @export
 * @interface ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileDeleteRequest
 */
export interface ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileDeleteRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileDelete
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for projectMasterDataProjectCompanyProfileIdInfo operation in ProjectCompanyProfileApi.
 * @export
 * @interface ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileIdInfoRequest
 */
export interface ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileIdInfoRequest {
    /**
     * 主键
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileIdInfo
     */
    readonly id: string
}

/**
 * Request parameters for projectMasterDataProjectCompanyProfileOdataAll operation in ProjectCompanyProfileApi.
 * @export
 * @interface ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataAllRequest
 */
export interface ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataAllRequest {
    /**
     * $filter
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataAll
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataAll
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataAll
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataAll
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataAll
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataAll
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataAll
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataAll
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataAll
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataAll
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataAll
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for projectMasterDataProjectCompanyProfileOdataExport operation in ProjectCompanyProfileApi.
 * @export
 * @interface ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataExportRequest
 */
export interface ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataExportRequest {
    /**
     * $filter
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataExport
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataExport
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataExport
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataExport
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataExport
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataExport
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataExport
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataExport
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataExport
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataExport
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataExport
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for projectMasterDataProjectCompanyProfilePageAll operation in ProjectCompanyProfileApi.
 * @export
 * @interface ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfilePageAllRequest
 */
export interface ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfilePageAllRequest {
    /**
     * 
     * @type {PageInputBase}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfilePageAll
     */
    readonly pageInputBase?: PageInputBase
}

/**
 * Request parameters for projectMasterDataProjectCompanyProfileSave operation in ProjectCompanyProfileApi.
 * @export
 * @interface ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileSaveRequest
 */
export interface ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileSaveRequest {
    /**
     * 
     * @type {ProjectCompanyProfileInput}
     * @memberof ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileSave
     */
    readonly projectCompanyProfileInput?: ProjectCompanyProfileInput
}

/**
 * ProjectCompanyProfileApi - object-oriented interface
 * @export
 * @class ProjectCompanyProfileApi
 * @extends {BaseAPI}
 */
export class ProjectCompanyProfileApi extends BaseAPI {
    /**
     * 
     * @summary 勾选部分Excel导出
     * @param {ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileByIDsExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectCompanyProfileApi
     */
    public projectMasterDataProjectCompanyProfileByIDsExport(requestParameters: ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileByIDsExportRequest = {}, options?: any) {
        return ProjectCompanyProfileApiFp(this.configuration).projectMasterDataProjectCompanyProfileByIDsExport(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据多个ID查询对象集合
     * @param {ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileByIDsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectCompanyProfileApi
     */
    public projectMasterDataProjectCompanyProfileByIDsList(requestParameters: ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileByIDsListRequest = {}, options?: any) {
        return ProjectCompanyProfileApiFp(this.configuration).projectMasterDataProjectCompanyProfileByIDsList(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除
     * @param {ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectCompanyProfileApi
     */
    public projectMasterDataProjectCompanyProfileDelete(requestParameters: ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileDeleteRequest = {}, options?: any) {
        return ProjectCompanyProfileApiFp(this.configuration).projectMasterDataProjectCompanyProfileDelete(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据ID查询对象
     * @param {ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileIdInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectCompanyProfileApi
     */
    public projectMasterDataProjectCompanyProfileIdInfo(requestParameters: ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileIdInfoRequest, options?: any) {
        return ProjectCompanyProfileApiFp(this.configuration).projectMasterDataProjectCompanyProfileIdInfo(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Odata 查询
     * @param {ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectCompanyProfileApi
     */
    public projectMasterDataProjectCompanyProfileOdataAll(requestParameters: ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataAllRequest = {}, options?: any) {
        return ProjectCompanyProfileApiFp(this.configuration).projectMasterDataProjectCompanyProfileOdataAll(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary [Odata]Excel导出
     * @param {ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectCompanyProfileApi
     */
    public projectMasterDataProjectCompanyProfileOdataExport(requestParameters: ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileOdataExportRequest = {}, options?: any) {
        return ProjectCompanyProfileApiFp(this.configuration).projectMasterDataProjectCompanyProfileOdataExport(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 数据库 分页查询
     * @param {ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfilePageAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectCompanyProfileApi
     */
    public projectMasterDataProjectCompanyProfilePageAll(requestParameters: ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfilePageAllRequest = {}, options?: any) {
        return ProjectCompanyProfileApiFp(this.configuration).projectMasterDataProjectCompanyProfilePageAll(requestParameters.pageInputBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 增加和修改
     * @param {ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileSaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectCompanyProfileApi
     */
    public projectMasterDataProjectCompanyProfileSave(requestParameters: ProjectCompanyProfileApiProjectMasterDataProjectCompanyProfileSaveRequest = {}, options?: any) {
        return ProjectCompanyProfileApiFp(this.configuration).projectMasterDataProjectCompanyProfileSave(requestParameters.projectCompanyProfileInput, options).then((request) => request(this.axios, this.basePath));
    }
}
