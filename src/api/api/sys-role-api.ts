/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IDslongInput } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataIQueryableSysRole } from '../models';
// @ts-ignore
import { ResultDataListSysRoleOutput } from '../models';
// @ts-ignore
import { ResultDataSysRole } from '../models';
// @ts-ignore
import { ResultDataSysRoleOutput } from '../models';
// @ts-ignore
import { SysRoleInput } from '../models';
// @ts-ignore
import { SysRolePermissionInput } from '../models';
/**
 * SysRoleApi - axios parameter creator
 * @export
 */
export const SysRoleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 删除角色
         * @param {IDslongInput} [iDslongInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageRoleDelete: async (iDslongInput?: IDslongInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/Role/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDslongInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 授权权限
         * @param {SysRolePermissionInput} [sysRolePermissionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageRoleGrantPermission: async (sysRolePermissionInput?: SysRolePermissionInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/Role/GrantPermission`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sysRolePermissionInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取全部角色
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageRoleOdataAll: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/Role/Odata/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 增加和修改角色
         * @param {SysRoleInput} [sysRoleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageRoleSave: async (sysRoleInput?: SysRoleInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/Role/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sysRoleInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取角色
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageRoleroleIdinfo: async (roleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('systemManageRoleroleIdinfo', 'roleId', roleId)
            const localVarPath = `/SystemManage/Role/{roleId}/info`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据userId获取角色
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageRoleuserIdRoles: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('systemManageRoleuserIdRoles', 'userId', userId)
            const localVarPath = `/SystemManage/Role/{userId}/Roles`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SysRoleApi - functional programming interface
 * @export
 */
export const SysRoleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SysRoleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 删除角色
         * @param {IDslongInput} [iDslongInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageRoleDelete(iDslongInput?: IDslongInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageRoleDelete(iDslongInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 授权权限
         * @param {SysRolePermissionInput} [sysRolePermissionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageRoleGrantPermission(sysRolePermissionInput?: SysRolePermissionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageRoleGrantPermission(sysRolePermissionInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取全部角色
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageRoleOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableSysRole>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageRoleOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 增加和修改角色
         * @param {SysRoleInput} [sysRoleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageRoleSave(sysRoleInput?: SysRoleInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataSysRoleOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageRoleSave(sysRoleInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 获取角色
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageRoleroleIdinfo(roleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataSysRole>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageRoleroleIdinfo(roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据userId获取角色
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageRoleuserIdRoles(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListSysRoleOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageRoleuserIdRoles(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SysRoleApi - factory interface
 * @export
 */
export const SysRoleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SysRoleApiFp(configuration)
    return {
        /**
         * 
         * @summary 删除角色
         * @param {IDslongInput} [iDslongInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageRoleDelete(iDslongInput?: IDslongInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.systemManageRoleDelete(iDslongInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 授权权限
         * @param {SysRolePermissionInput} [sysRolePermissionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageRoleGrantPermission(sysRolePermissionInput?: SysRolePermissionInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.systemManageRoleGrantPermission(sysRolePermissionInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取全部角色
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageRoleOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableSysRole> {
            return localVarFp.systemManageRoleOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 增加和修改角色
         * @param {SysRoleInput} [sysRoleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageRoleSave(sysRoleInput?: SysRoleInput, options?: any): AxiosPromise<ResultDataSysRoleOutput> {
            return localVarFp.systemManageRoleSave(sysRoleInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取角色
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageRoleroleIdinfo(roleId: string, options?: any): AxiosPromise<ResultDataSysRole> {
            return localVarFp.systemManageRoleroleIdinfo(roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据userId获取角色
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageRoleuserIdRoles(userId: string, options?: any): AxiosPromise<ResultDataListSysRoleOutput> {
            return localVarFp.systemManageRoleuserIdRoles(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for systemManageRoleDelete operation in SysRoleApi.
 * @export
 * @interface SysRoleApiSystemManageRoleDeleteRequest
 */
export interface SysRoleApiSystemManageRoleDeleteRequest {
    /**
     * 
     * @type {IDslongInput}
     * @memberof SysRoleApiSystemManageRoleDelete
     */
    readonly iDslongInput?: IDslongInput
}

/**
 * Request parameters for systemManageRoleGrantPermission operation in SysRoleApi.
 * @export
 * @interface SysRoleApiSystemManageRoleGrantPermissionRequest
 */
export interface SysRoleApiSystemManageRoleGrantPermissionRequest {
    /**
     * 
     * @type {SysRolePermissionInput}
     * @memberof SysRoleApiSystemManageRoleGrantPermission
     */
    readonly sysRolePermissionInput?: SysRolePermissionInput
}

/**
 * Request parameters for systemManageRoleOdataAll operation in SysRoleApi.
 * @export
 * @interface SysRoleApiSystemManageRoleOdataAllRequest
 */
export interface SysRoleApiSystemManageRoleOdataAllRequest {
    /**
     * $filter
     * @type {string}
     * @memberof SysRoleApiSystemManageRoleOdataAll
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof SysRoleApiSystemManageRoleOdataAll
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof SysRoleApiSystemManageRoleOdataAll
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof SysRoleApiSystemManageRoleOdataAll
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof SysRoleApiSystemManageRoleOdataAll
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof SysRoleApiSystemManageRoleOdataAll
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof SysRoleApiSystemManageRoleOdataAll
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof SysRoleApiSystemManageRoleOdataAll
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof SysRoleApiSystemManageRoleOdataAll
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof SysRoleApiSystemManageRoleOdataAll
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof SysRoleApiSystemManageRoleOdataAll
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for systemManageRoleSave operation in SysRoleApi.
 * @export
 * @interface SysRoleApiSystemManageRoleSaveRequest
 */
export interface SysRoleApiSystemManageRoleSaveRequest {
    /**
     * 
     * @type {SysRoleInput}
     * @memberof SysRoleApiSystemManageRoleSave
     */
    readonly sysRoleInput?: SysRoleInput
}

/**
 * Request parameters for systemManageRoleroleIdinfo operation in SysRoleApi.
 * @export
 * @interface SysRoleApiSystemManageRoleroleIdinfoRequest
 */
export interface SysRoleApiSystemManageRoleroleIdinfoRequest {
    /**
     * 
     * @type {string}
     * @memberof SysRoleApiSystemManageRoleroleIdinfo
     */
    readonly roleId: string
}

/**
 * Request parameters for systemManageRoleuserIdRoles operation in SysRoleApi.
 * @export
 * @interface SysRoleApiSystemManageRoleuserIdRolesRequest
 */
export interface SysRoleApiSystemManageRoleuserIdRolesRequest {
    /**
     * 
     * @type {string}
     * @memberof SysRoleApiSystemManageRoleuserIdRoles
     */
    readonly userId: string
}

/**
 * SysRoleApi - object-oriented interface
 * @export
 * @class SysRoleApi
 * @extends {BaseAPI}
 */
export class SysRoleApi extends BaseAPI {
    /**
     * 
     * @summary 删除角色
     * @param {SysRoleApiSystemManageRoleDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysRoleApi
     */
    public systemManageRoleDelete(requestParameters: SysRoleApiSystemManageRoleDeleteRequest = {}, options?: any) {
        return SysRoleApiFp(this.configuration).systemManageRoleDelete(requestParameters.iDslongInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 授权权限
     * @param {SysRoleApiSystemManageRoleGrantPermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysRoleApi
     */
    public systemManageRoleGrantPermission(requestParameters: SysRoleApiSystemManageRoleGrantPermissionRequest = {}, options?: any) {
        return SysRoleApiFp(this.configuration).systemManageRoleGrantPermission(requestParameters.sysRolePermissionInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取全部角色
     * @param {SysRoleApiSystemManageRoleOdataAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysRoleApi
     */
    public systemManageRoleOdataAll(requestParameters: SysRoleApiSystemManageRoleOdataAllRequest = {}, options?: any) {
        return SysRoleApiFp(this.configuration).systemManageRoleOdataAll(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 增加和修改角色
     * @param {SysRoleApiSystemManageRoleSaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysRoleApi
     */
    public systemManageRoleSave(requestParameters: SysRoleApiSystemManageRoleSaveRequest = {}, options?: any) {
        return SysRoleApiFp(this.configuration).systemManageRoleSave(requestParameters.sysRoleInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取角色
     * @param {SysRoleApiSystemManageRoleroleIdinfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysRoleApi
     */
    public systemManageRoleroleIdinfo(requestParameters: SysRoleApiSystemManageRoleroleIdinfoRequest, options?: any) {
        return SysRoleApiFp(this.configuration).systemManageRoleroleIdinfo(requestParameters.roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据userId获取角色
     * @param {SysRoleApiSystemManageRoleuserIdRolesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysRoleApi
     */
    public systemManageRoleuserIdRoles(requestParameters: SysRoleApiSystemManageRoleuserIdRolesRequest, options?: any) {
        return SysRoleApiFp(this.configuration).systemManageRoleuserIdRoles(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }
}
