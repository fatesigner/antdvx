/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ExchangeRateInput } from '../models';
// @ts-ignore
import { IDsStringInput } from '../models';
// @ts-ignore
import { PageInputBase } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataExchangeRateOutput } from '../models';
// @ts-ignore
import { ResultDataFileContentResult } from '../models';
// @ts-ignore
import { ResultDataIQueryableExchangeRate } from '../models';
// @ts-ignore
import { ResultDataListExchangeRateOutput } from '../models';
// @ts-ignore
import { ResultDataPageResultExchangeRateOutput } from '../models';
/**
 * ExchangeRateApi - axios parameter creator
 * @export
 */
export const ExchangeRateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary 勾选部分Excel导出
         * @param {IDsStringInput} [iDsInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataExchangeRateByIDsExport: async (iDsInput?: IDsStringInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ExchangeRate/ByIDs/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 根据多个ID查询对象集合
         * @param {IDsStringInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataExchangeRateByIDsList: async (iDsInput?: IDsStringInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ExchangeRate/ByIDs/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 删除
         * @param {IDsStringInput} [iDsInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataExchangeRateDelete: async (iDsInput?: IDsStringInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ExchangeRate/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataExchangeRateIdInfo: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectMasterDataExchangeRateIdInfo', 'id', id)
            const localVarPath = `/ProjectMasterData/ExchangeRate/{Id}/Info`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataExchangeRateOdataAll: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ExchangeRate/Odata/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataExchangeRateOdataExport: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ExchangeRate/Odata/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataExchangeRatePageAll: async (pageInputBase?: PageInputBase, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ExchangeRate/Page/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pageInputBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 增加和修改
         * @param {ExchangeRateInput} [exchangeRateInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataExchangeRateSave: async (exchangeRateInput?: ExchangeRateInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ExchangeRate/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(exchangeRateInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExchangeRateApi - functional programming interface
 * @export
 */
export const ExchangeRateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExchangeRateApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary 勾选部分Excel导出
         * @param {IDsStringInput} [iDsInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataExchangeRateByIDsExport(iDsInput?: IDsStringInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataExchangeRateByIDsExport(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary 根据多个ID查询对象集合
         * @param {IDsStringInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataExchangeRateByIDsList(iDsInput?: IDsStringInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListExchangeRateOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataExchangeRateByIDsList(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary 删除
         * @param {IDsStringInput} [iDsInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataExchangeRateDelete(iDsInput?: IDsStringInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataExchangeRateDelete(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataExchangeRateIdInfo(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataExchangeRateOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataExchangeRateIdInfo(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataExchangeRateOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableExchangeRate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataExchangeRateOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataExchangeRateOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataExchangeRateOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataExchangeRatePageAll(pageInputBase?: PageInputBase, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataPageResultExchangeRateOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataExchangeRatePageAll(pageInputBase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary 增加和修改
         * @param {ExchangeRateInput} [exchangeRateInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataExchangeRateSave(exchangeRateInput?: ExchangeRateInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataExchangeRateSave(exchangeRateInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExchangeRateApi - factory interface
 * @export
 */
export const ExchangeRateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExchangeRateApiFp(configuration)
    return {
        /**
         *
         * @summary 勾选部分Excel导出
         * @param {IDsStringInput} [iDsInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataExchangeRateByIDsExport(iDsInput?: IDsStringInput, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.projectMasterDataExchangeRateByIDsExport(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 根据多个ID查询对象集合
         * @param {IDsStringInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataExchangeRateByIDsList(iDsInput?: IDsStringInput, options?: any): AxiosPromise<ResultDataListExchangeRateOutput> {
            return localVarFp.projectMasterDataExchangeRateByIDsList(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 删除
         * @param {IDsStringInput} [iDsInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataExchangeRateDelete(iDsInput?: IDsStringInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.projectMasterDataExchangeRateDelete(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataExchangeRateIdInfo(id: string, options?: any): AxiosPromise<ResultDataExchangeRateOutput> {
            return localVarFp.projectMasterDataExchangeRateIdInfo(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataExchangeRateOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableExchangeRate> {
            return localVarFp.projectMasterDataExchangeRateOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataExchangeRateOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.projectMasterDataExchangeRateOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataExchangeRatePageAll(pageInputBase?: PageInputBase, options?: any): AxiosPromise<ResultDataPageResultExchangeRateOutput> {
            return localVarFp.projectMasterDataExchangeRatePageAll(pageInputBase, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 增加和修改
         * @param {ExchangeRateInput} [exchangeRateInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataExchangeRateSave(exchangeRateInput?: ExchangeRateInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.projectMasterDataExchangeRateSave(exchangeRateInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for projectMasterDataExchangeRateByIDsExport operation in ExchangeRateApi.
 * @export
 * @interface ExchangeRateApiProjectMasterDataExchangeRateByIDsExportRequest
 */
export interface ExchangeRateApiProjectMasterDataExchangeRateByIDsExportRequest {
    /**
     *
     * @type {IDsStringInput}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateByIDsExport
     */
    readonly iDsInput?: IDsStringInput
}

/**
 * Request parameters for projectMasterDataExchangeRateByIDsList operation in ExchangeRateApi.
 * @export
 * @interface ExchangeRateApiProjectMasterDataExchangeRateByIDsListRequest
 */
export interface ExchangeRateApiProjectMasterDataExchangeRateByIDsListRequest {
    /**
     * 多个主键
     * @type {IDsStringInput}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateByIDsList
     */
    readonly iDsInput?: IDsStringInput
}

/**
 * Request parameters for projectMasterDataExchangeRateDelete operation in ExchangeRateApi.
 * @export
 * @interface ExchangeRateApiProjectMasterDataExchangeRateDeleteRequest
 */
export interface ExchangeRateApiProjectMasterDataExchangeRateDeleteRequest {
    /**
     *
     * @type {IDsStringInput}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateDelete
     */
    readonly iDsInput?: IDsStringInput
}

/**
 * Request parameters for projectMasterDataExchangeRateIdInfo operation in ExchangeRateApi.
 * @export
 * @interface ExchangeRateApiProjectMasterDataExchangeRateIdInfoRequest
 */
export interface ExchangeRateApiProjectMasterDataExchangeRateIdInfoRequest {
    /**
     * 主键
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateIdInfo
     */
    readonly id: string
}

/**
 * Request parameters for projectMasterDataExchangeRateOdataAll operation in ExchangeRateApi.
 * @export
 * @interface ExchangeRateApiProjectMasterDataExchangeRateOdataAllRequest
 */
export interface ExchangeRateApiProjectMasterDataExchangeRateOdataAllRequest {
    /**
     * $filter
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataAll
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataAll
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataAll
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataAll
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataAll
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataAll
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataAll
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataAll
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataAll
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataAll
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataAll
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for projectMasterDataExchangeRateOdataExport operation in ExchangeRateApi.
 * @export
 * @interface ExchangeRateApiProjectMasterDataExchangeRateOdataExportRequest
 */
export interface ExchangeRateApiProjectMasterDataExchangeRateOdataExportRequest {
    /**
     * $filter
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataExport
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataExport
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataExport
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataExport
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataExport
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataExport
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataExport
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataExport
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataExport
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataExport
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateOdataExport
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for projectMasterDataExchangeRatePageAll operation in ExchangeRateApi.
 * @export
 * @interface ExchangeRateApiProjectMasterDataExchangeRatePageAllRequest
 */
export interface ExchangeRateApiProjectMasterDataExchangeRatePageAllRequest {
    /**
     *
     * @type {PageInputBase}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRatePageAll
     */
    readonly pageInputBase?: PageInputBase
}

/**
 * Request parameters for projectMasterDataExchangeRateSave operation in ExchangeRateApi.
 * @export
 * @interface ExchangeRateApiProjectMasterDataExchangeRateSaveRequest
 */
export interface ExchangeRateApiProjectMasterDataExchangeRateSaveRequest {
    /**
     *
     * @type {ExchangeRateInput}
     * @memberof ExchangeRateApiProjectMasterDataExchangeRateSave
     */
    readonly exchangeRateInput?: ExchangeRateInput
}

/**
 * ExchangeRateApi - object-oriented interface
 * @export
 * @class ExchangeRateApi
 * @extends {BaseAPI}
 */
export class ExchangeRateApi extends BaseAPI {
    /**
     *
     * @summary 勾选部分Excel导出
     * @param {ExchangeRateApiProjectMasterDataExchangeRateByIDsExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeRateApi
     */
    public projectMasterDataExchangeRateByIDsExport(requestParameters: ExchangeRateApiProjectMasterDataExchangeRateByIDsExportRequest = {}, options?: any) {
        return ExchangeRateApiFp(this.configuration).projectMasterDataExchangeRateByIDsExport(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary 根据多个ID查询对象集合
     * @param {ExchangeRateApiProjectMasterDataExchangeRateByIDsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeRateApi
     */
    public projectMasterDataExchangeRateByIDsList(requestParameters: ExchangeRateApiProjectMasterDataExchangeRateByIDsListRequest = {}, options?: any) {
        return ExchangeRateApiFp(this.configuration).projectMasterDataExchangeRateByIDsList(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary 删除
     * @param {ExchangeRateApiProjectMasterDataExchangeRateDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeRateApi
     */
    public projectMasterDataExchangeRateDelete(requestParameters: ExchangeRateApiProjectMasterDataExchangeRateDeleteRequest = {}, options?: any) {
        return ExchangeRateApiFp(this.configuration).projectMasterDataExchangeRateDelete(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary 根据ID查询对象
     * @param {ExchangeRateApiProjectMasterDataExchangeRateIdInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeRateApi
     */
    public projectMasterDataExchangeRateIdInfo(requestParameters: ExchangeRateApiProjectMasterDataExchangeRateIdInfoRequest, options?: any) {
        return ExchangeRateApiFp(this.configuration).projectMasterDataExchangeRateIdInfo(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Odata 查询
     * @param {ExchangeRateApiProjectMasterDataExchangeRateOdataAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeRateApi
     */
    public projectMasterDataExchangeRateOdataAll(requestParameters: ExchangeRateApiProjectMasterDataExchangeRateOdataAllRequest = {}, options?: any) {
        return ExchangeRateApiFp(this.configuration).projectMasterDataExchangeRateOdataAll(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary [Odata]Excel导出
     * @param {ExchangeRateApiProjectMasterDataExchangeRateOdataExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeRateApi
     */
    public projectMasterDataExchangeRateOdataExport(requestParameters: ExchangeRateApiProjectMasterDataExchangeRateOdataExportRequest = {}, options?: any) {
        return ExchangeRateApiFp(this.configuration).projectMasterDataExchangeRateOdataExport(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary 数据库 分页查询
     * @param {ExchangeRateApiProjectMasterDataExchangeRatePageAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeRateApi
     */
    public projectMasterDataExchangeRatePageAll(requestParameters: ExchangeRateApiProjectMasterDataExchangeRatePageAllRequest = {}, options?: any) {
        return ExchangeRateApiFp(this.configuration).projectMasterDataExchangeRatePageAll(requestParameters.pageInputBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary 增加和修改
     * @param {ExchangeRateApiProjectMasterDataExchangeRateSaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeRateApi
     */
    public projectMasterDataExchangeRateSave(requestParameters: ExchangeRateApiProjectMasterDataExchangeRateSaveRequest = {}, options?: any) {
        return ExchangeRateApiFp(this.configuration).projectMasterDataExchangeRateSave(requestParameters.exchangeRateInput, options).then((request) => request(this.axios, this.basePath));
    }
}
