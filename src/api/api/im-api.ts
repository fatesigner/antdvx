/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PublicSendMsgInput } from '../models';
// @ts-ignore
import { ResultDataListChatHistory } from '../models';
/**
 * ImApi - axios parameter creator
 * @export
 */
export const ImApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取公共聊天历史信息(0,1,2)
         * @param {number} [chatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemImGetChatHistory: async (chatType?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/System/Im/GetChatHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (chatType !== undefined) {
                localVarQueryParameter['chatType'] = chatType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 公共聊天
         * @param {PublicSendMsgInput} [publicSendMsgInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemImPublicSendMsg: async (publicSendMsgInput?: PublicSendMsgInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/System/Im/PublicSendMsg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publicSendMsgInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImApi - functional programming interface
 * @export
 */
export const ImApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 获取公共聊天历史信息(0,1,2)
         * @param {number} [chatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemImGetChatHistory(chatType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListChatHistory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemImGetChatHistory(chatType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 公共聊天
         * @param {PublicSendMsgInput} [publicSendMsgInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemImPublicSendMsg(publicSendMsgInput?: PublicSendMsgInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemImPublicSendMsg(publicSendMsgInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ImApi - factory interface
 * @export
 */
export const ImApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImApiFp(configuration)
    return {
        /**
         * 
         * @summary 获取公共聊天历史信息(0,1,2)
         * @param {number} [chatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemImGetChatHistory(chatType?: number, options?: any): AxiosPromise<ResultDataListChatHistory> {
            return localVarFp.systemImGetChatHistory(chatType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 公共聊天
         * @param {PublicSendMsgInput} [publicSendMsgInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemImPublicSendMsg(publicSendMsgInput?: PublicSendMsgInput, options?: any): AxiosPromise<void> {
            return localVarFp.systemImPublicSendMsg(publicSendMsgInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for systemImGetChatHistory operation in ImApi.
 * @export
 * @interface ImApiSystemImGetChatHistoryRequest
 */
export interface ImApiSystemImGetChatHistoryRequest {
    /**
     * 
     * @type {number}
     * @memberof ImApiSystemImGetChatHistory
     */
    readonly chatType?: number
}

/**
 * Request parameters for systemImPublicSendMsg operation in ImApi.
 * @export
 * @interface ImApiSystemImPublicSendMsgRequest
 */
export interface ImApiSystemImPublicSendMsgRequest {
    /**
     * 
     * @type {PublicSendMsgInput}
     * @memberof ImApiSystemImPublicSendMsg
     */
    readonly publicSendMsgInput?: PublicSendMsgInput
}

/**
 * ImApi - object-oriented interface
 * @export
 * @class ImApi
 * @extends {BaseAPI}
 */
export class ImApi extends BaseAPI {
    /**
     * 
     * @summary 获取公共聊天历史信息(0,1,2)
     * @param {ImApiSystemImGetChatHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImApi
     */
    public systemImGetChatHistory(requestParameters: ImApiSystemImGetChatHistoryRequest = {}, options?: any) {
        return ImApiFp(this.configuration).systemImGetChatHistory(requestParameters.chatType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 公共聊天
     * @param {ImApiSystemImPublicSendMsgRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImApi
     */
    public systemImPublicSendMsg(requestParameters: ImApiSystemImPublicSendMsgRequest = {}, options?: any) {
        return ImApiFp(this.configuration).systemImPublicSendMsg(requestParameters.publicSendMsgInput, options).then((request) => request(this.axios, this.basePath));
    }
}
