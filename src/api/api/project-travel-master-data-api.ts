/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IDsInput } from '../models';
// @ts-ignore
import { PageInputBase } from '../models';
// @ts-ignore
import { ProjectTravelMasterDataInput } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataFileContentResult } from '../models';
// @ts-ignore
import { ResultDataIQueryableProjectTravelMasterData } from '../models';
// @ts-ignore
import { ResultDataListProjectTravelMasterDataOutput } from '../models';
// @ts-ignore
import { ResultDataPageResultProjectTravelMasterDataOutput } from '../models';
// @ts-ignore
import { ResultDataProjectTravelMasterDataOutput } from '../models';
/**
 * ProjectTravelMasterDataApi - axios parameter creator
 * @export
 */
export const ProjectTravelMasterDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectTravelMasterDataByIDsExport: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectTravelMasterData/ByIDs/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectTravelMasterDataByIDsList: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectTravelMasterData/ByIDs/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectTravelMasterDataDelete: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectTravelMasterData/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectTravelMasterDataIdInfo: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectMasterDataProjectTravelMasterDataIdInfo', 'id', id)
            const localVarPath = `/ProjectMasterData/ProjectTravelMasterData/{Id}/Info`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectTravelMasterDataOdataAll: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectTravelMasterData/Odata/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectTravelMasterDataOdataExport: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectTravelMasterData/Odata/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectTravelMasterDataPageAll: async (pageInputBase?: PageInputBase, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectTravelMasterData/Page/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pageInputBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 增加和修改
         * @param {ProjectTravelMasterDataInput} [projectTravelMasterDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectTravelMasterDataSave: async (projectTravelMasterDataInput?: ProjectTravelMasterDataInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectTravelMasterData/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectTravelMasterDataInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectTravelMasterDataApi - functional programming interface
 * @export
 */
export const ProjectTravelMasterDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectTravelMasterDataApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectTravelMasterDataByIDsExport(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectTravelMasterDataByIDsExport(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectTravelMasterDataByIDsList(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListProjectTravelMasterDataOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectTravelMasterDataByIDsList(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectTravelMasterDataDelete(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectTravelMasterDataDelete(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectTravelMasterDataIdInfo(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataProjectTravelMasterDataOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectTravelMasterDataIdInfo(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectTravelMasterDataOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableProjectTravelMasterData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectTravelMasterDataOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectTravelMasterDataOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectTravelMasterDataOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectTravelMasterDataPageAll(pageInputBase?: PageInputBase, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataPageResultProjectTravelMasterDataOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectTravelMasterDataPageAll(pageInputBase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 增加和修改
         * @param {ProjectTravelMasterDataInput} [projectTravelMasterDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectTravelMasterDataSave(projectTravelMasterDataInput?: ProjectTravelMasterDataInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectTravelMasterDataSave(projectTravelMasterDataInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectTravelMasterDataApi - factory interface
 * @export
 */
export const ProjectTravelMasterDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectTravelMasterDataApiFp(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectTravelMasterDataByIDsExport(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.projectMasterDataProjectTravelMasterDataByIDsExport(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectTravelMasterDataByIDsList(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataListProjectTravelMasterDataOutput> {
            return localVarFp.projectMasterDataProjectTravelMasterDataByIDsList(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectTravelMasterDataDelete(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.projectMasterDataProjectTravelMasterDataDelete(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectTravelMasterDataIdInfo(id: string, options?: any): AxiosPromise<ResultDataProjectTravelMasterDataOutput> {
            return localVarFp.projectMasterDataProjectTravelMasterDataIdInfo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectTravelMasterDataOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableProjectTravelMasterData> {
            return localVarFp.projectMasterDataProjectTravelMasterDataOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectTravelMasterDataOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.projectMasterDataProjectTravelMasterDataOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectTravelMasterDataPageAll(pageInputBase?: PageInputBase, options?: any): AxiosPromise<ResultDataPageResultProjectTravelMasterDataOutput> {
            return localVarFp.projectMasterDataProjectTravelMasterDataPageAll(pageInputBase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 增加和修改
         * @param {ProjectTravelMasterDataInput} [projectTravelMasterDataInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectTravelMasterDataSave(projectTravelMasterDataInput?: ProjectTravelMasterDataInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.projectMasterDataProjectTravelMasterDataSave(projectTravelMasterDataInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for projectMasterDataProjectTravelMasterDataByIDsExport operation in ProjectTravelMasterDataApi.
 * @export
 * @interface ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataByIDsExportRequest
 */
export interface ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataByIDsExportRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataByIDsExport
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for projectMasterDataProjectTravelMasterDataByIDsList operation in ProjectTravelMasterDataApi.
 * @export
 * @interface ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataByIDsListRequest
 */
export interface ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataByIDsListRequest {
    /**
     * 多个主键
     * @type {IDsInput}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataByIDsList
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for projectMasterDataProjectTravelMasterDataDelete operation in ProjectTravelMasterDataApi.
 * @export
 * @interface ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataDeleteRequest
 */
export interface ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataDeleteRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataDelete
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for projectMasterDataProjectTravelMasterDataIdInfo operation in ProjectTravelMasterDataApi.
 * @export
 * @interface ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataIdInfoRequest
 */
export interface ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataIdInfoRequest {
    /**
     * 主键
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataIdInfo
     */
    readonly id: string
}

/**
 * Request parameters for projectMasterDataProjectTravelMasterDataOdataAll operation in ProjectTravelMasterDataApi.
 * @export
 * @interface ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataAllRequest
 */
export interface ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataAllRequest {
    /**
     * $filter
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataAll
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataAll
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataAll
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataAll
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataAll
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataAll
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataAll
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataAll
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataAll
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataAll
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataAll
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for projectMasterDataProjectTravelMasterDataOdataExport operation in ProjectTravelMasterDataApi.
 * @export
 * @interface ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataExportRequest
 */
export interface ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataExportRequest {
    /**
     * $filter
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataExport
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataExport
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataExport
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataExport
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataExport
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataExport
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataExport
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataExport
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataExport
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataExport
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataExport
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for projectMasterDataProjectTravelMasterDataPageAll operation in ProjectTravelMasterDataApi.
 * @export
 * @interface ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataPageAllRequest
 */
export interface ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataPageAllRequest {
    /**
     * 
     * @type {PageInputBase}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataPageAll
     */
    readonly pageInputBase?: PageInputBase
}

/**
 * Request parameters for projectMasterDataProjectTravelMasterDataSave operation in ProjectTravelMasterDataApi.
 * @export
 * @interface ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataSaveRequest
 */
export interface ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataSaveRequest {
    /**
     * 
     * @type {ProjectTravelMasterDataInput}
     * @memberof ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataSave
     */
    readonly projectTravelMasterDataInput?: ProjectTravelMasterDataInput
}

/**
 * ProjectTravelMasterDataApi - object-oriented interface
 * @export
 * @class ProjectTravelMasterDataApi
 * @extends {BaseAPI}
 */
export class ProjectTravelMasterDataApi extends BaseAPI {
    /**
     * 
     * @summary 勾选部分Excel导出
     * @param {ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataByIDsExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTravelMasterDataApi
     */
    public projectMasterDataProjectTravelMasterDataByIDsExport(requestParameters: ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataByIDsExportRequest = {}, options?: any) {
        return ProjectTravelMasterDataApiFp(this.configuration).projectMasterDataProjectTravelMasterDataByIDsExport(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据多个ID查询对象集合
     * @param {ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataByIDsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTravelMasterDataApi
     */
    public projectMasterDataProjectTravelMasterDataByIDsList(requestParameters: ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataByIDsListRequest = {}, options?: any) {
        return ProjectTravelMasterDataApiFp(this.configuration).projectMasterDataProjectTravelMasterDataByIDsList(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除
     * @param {ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTravelMasterDataApi
     */
    public projectMasterDataProjectTravelMasterDataDelete(requestParameters: ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataDeleteRequest = {}, options?: any) {
        return ProjectTravelMasterDataApiFp(this.configuration).projectMasterDataProjectTravelMasterDataDelete(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据ID查询对象
     * @param {ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataIdInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTravelMasterDataApi
     */
    public projectMasterDataProjectTravelMasterDataIdInfo(requestParameters: ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataIdInfoRequest, options?: any) {
        return ProjectTravelMasterDataApiFp(this.configuration).projectMasterDataProjectTravelMasterDataIdInfo(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Odata 查询
     * @param {ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTravelMasterDataApi
     */
    public projectMasterDataProjectTravelMasterDataOdataAll(requestParameters: ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataAllRequest = {}, options?: any) {
        return ProjectTravelMasterDataApiFp(this.configuration).projectMasterDataProjectTravelMasterDataOdataAll(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary [Odata]Excel导出
     * @param {ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTravelMasterDataApi
     */
    public projectMasterDataProjectTravelMasterDataOdataExport(requestParameters: ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataOdataExportRequest = {}, options?: any) {
        return ProjectTravelMasterDataApiFp(this.configuration).projectMasterDataProjectTravelMasterDataOdataExport(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 数据库 分页查询
     * @param {ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataPageAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTravelMasterDataApi
     */
    public projectMasterDataProjectTravelMasterDataPageAll(requestParameters: ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataPageAllRequest = {}, options?: any) {
        return ProjectTravelMasterDataApiFp(this.configuration).projectMasterDataProjectTravelMasterDataPageAll(requestParameters.pageInputBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 增加和修改
     * @param {ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataSaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectTravelMasterDataApi
     */
    public projectMasterDataProjectTravelMasterDataSave(requestParameters: ProjectTravelMasterDataApiProjectMasterDataProjectTravelMasterDataSaveRequest = {}, options?: any) {
        return ProjectTravelMasterDataApiFp(this.configuration).projectMasterDataProjectTravelMasterDataSave(requestParameters.projectTravelMasterDataInput, options).then((request) => request(this.axios, this.basePath));
    }
}
