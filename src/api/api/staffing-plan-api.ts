/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IDsInput } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataFileContentResult } from '../models';
// @ts-ignore
import { ResultDataIQueryableStaffingPlanInfo } from '../models';
// @ts-ignore
import { ResultDataIQueryableStaffingPlanOutput } from '../models';
// @ts-ignore
import { ResultDataListObject } from '../models';
// @ts-ignore
import { ResultDataStaffingPlanOutput } from '../models';
// @ts-ignore
import { StaffingCodeInput } from '../models';
// @ts-ignore
import { StaffingPlanMonthDatasInput } from '../models';
/**
 * StaffingPlanApi - axios parameter creator
 * @export
 */
export const StaffingPlanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffingPlanDelete: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/StaffingPlan/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffingPlanIdInfo: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('staffingPlanIdInfo', 'id', id)
            const localVarPath = `/StaffingPlan/{Id}/Info`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Odata 查询 返回数据库表结构
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffingPlanOdataAll: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/StaffingPlan/Odata/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Odata 查询  带出多个动态月份
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffingPlanOdataAllMonthOutput: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/StaffingPlan/Odata/All/Month/Output`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Odata 查询 返回输出类结构
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffingPlanOdataAllOutput: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/StaffingPlan/Odata/All/Output`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffingPlanOdataExport: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/StaffingPlan/Odata/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 保存功能 增加和修改
         * @param {StaffingPlanMonthDatasInput} [staffingPlanMonthDatasInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffingPlanSave: async (staffingPlanMonthDatasInput?: StaffingPlanMonthDatasInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/StaffingPlan/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(staffingPlanMonthDatasInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据projectNo查询对象
         * @param {StaffingCodeInput} [staffingCodeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffingPlaninfo: async (staffingCodeInput?: StaffingCodeInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/StaffingPlan/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(staffingCodeInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StaffingPlanApi - functional programming interface
 * @export
 */
export const StaffingPlanApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StaffingPlanApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async staffingPlanDelete(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.staffingPlanDelete(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async staffingPlanIdInfo(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataStaffingPlanOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.staffingPlanIdInfo(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Odata 查询 返回数据库表结构
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async staffingPlanOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableStaffingPlanInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.staffingPlanOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Odata 查询  带出多个动态月份
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async staffingPlanOdataAllMonthOutput(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.staffingPlanOdataAllMonthOutput(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Odata 查询 返回输出类结构
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async staffingPlanOdataAllOutput(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableStaffingPlanOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.staffingPlanOdataAllOutput(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async staffingPlanOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.staffingPlanOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 保存功能 增加和修改
         * @param {StaffingPlanMonthDatasInput} [staffingPlanMonthDatasInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async staffingPlanSave(staffingPlanMonthDatasInput?: StaffingPlanMonthDatasInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.staffingPlanSave(staffingPlanMonthDatasInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据projectNo查询对象
         * @param {StaffingCodeInput} [staffingCodeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async staffingPlaninfo(staffingCodeInput?: StaffingCodeInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataStaffingPlanOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.staffingPlaninfo(staffingCodeInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StaffingPlanApi - factory interface
 * @export
 */
export const StaffingPlanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StaffingPlanApiFp(configuration)
    return {
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffingPlanDelete(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.staffingPlanDelete(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffingPlanIdInfo(id: string, options?: any): AxiosPromise<ResultDataStaffingPlanOutput> {
            return localVarFp.staffingPlanIdInfo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Odata 查询 返回数据库表结构
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffingPlanOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableStaffingPlanInfo> {
            return localVarFp.staffingPlanOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Odata 查询  带出多个动态月份
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffingPlanOdataAllMonthOutput(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataListObject> {
            return localVarFp.staffingPlanOdataAllMonthOutput(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Odata 查询 返回输出类结构
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffingPlanOdataAllOutput(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableStaffingPlanOutput> {
            return localVarFp.staffingPlanOdataAllOutput(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffingPlanOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.staffingPlanOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 保存功能 增加和修改
         * @param {StaffingPlanMonthDatasInput} [staffingPlanMonthDatasInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffingPlanSave(staffingPlanMonthDatasInput?: StaffingPlanMonthDatasInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.staffingPlanSave(staffingPlanMonthDatasInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据projectNo查询对象
         * @param {StaffingCodeInput} [staffingCodeInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        staffingPlaninfo(staffingCodeInput?: StaffingCodeInput, options?: any): AxiosPromise<ResultDataStaffingPlanOutput> {
            return localVarFp.staffingPlaninfo(staffingCodeInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for staffingPlanDelete operation in StaffingPlanApi.
 * @export
 * @interface StaffingPlanApiStaffingPlanDeleteRequest
 */
export interface StaffingPlanApiStaffingPlanDeleteRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof StaffingPlanApiStaffingPlanDelete
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for staffingPlanIdInfo operation in StaffingPlanApi.
 * @export
 * @interface StaffingPlanApiStaffingPlanIdInfoRequest
 */
export interface StaffingPlanApiStaffingPlanIdInfoRequest {
    /**
     * 主键
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanIdInfo
     */
    readonly id: string
}

/**
 * Request parameters for staffingPlanOdataAll operation in StaffingPlanApi.
 * @export
 * @interface StaffingPlanApiStaffingPlanOdataAllRequest
 */
export interface StaffingPlanApiStaffingPlanOdataAllRequest {
    /**
     * $filter
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAll
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAll
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAll
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAll
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAll
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAll
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAll
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAll
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAll
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAll
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAll
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for staffingPlanOdataAllMonthOutput operation in StaffingPlanApi.
 * @export
 * @interface StaffingPlanApiStaffingPlanOdataAllMonthOutputRequest
 */
export interface StaffingPlanApiStaffingPlanOdataAllMonthOutputRequest {
    /**
     * $filter
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllMonthOutput
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllMonthOutput
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllMonthOutput
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllMonthOutput
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllMonthOutput
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllMonthOutput
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllMonthOutput
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllMonthOutput
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllMonthOutput
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllMonthOutput
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllMonthOutput
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for staffingPlanOdataAllOutput operation in StaffingPlanApi.
 * @export
 * @interface StaffingPlanApiStaffingPlanOdataAllOutputRequest
 */
export interface StaffingPlanApiStaffingPlanOdataAllOutputRequest {
    /**
     * $filter
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllOutput
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllOutput
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllOutput
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllOutput
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllOutput
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllOutput
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllOutput
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllOutput
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllOutput
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllOutput
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataAllOutput
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for staffingPlanOdataExport operation in StaffingPlanApi.
 * @export
 * @interface StaffingPlanApiStaffingPlanOdataExportRequest
 */
export interface StaffingPlanApiStaffingPlanOdataExportRequest {
    /**
     * $filter
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataExport
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataExport
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataExport
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataExport
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataExport
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataExport
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataExport
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataExport
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataExport
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataExport
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof StaffingPlanApiStaffingPlanOdataExport
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for staffingPlanSave operation in StaffingPlanApi.
 * @export
 * @interface StaffingPlanApiStaffingPlanSaveRequest
 */
export interface StaffingPlanApiStaffingPlanSaveRequest {
    /**
     * 
     * @type {StaffingPlanMonthDatasInput}
     * @memberof StaffingPlanApiStaffingPlanSave
     */
    readonly staffingPlanMonthDatasInput?: StaffingPlanMonthDatasInput
}

/**
 * Request parameters for staffingPlaninfo operation in StaffingPlanApi.
 * @export
 * @interface StaffingPlanApiStaffingPlaninfoRequest
 */
export interface StaffingPlanApiStaffingPlaninfoRequest {
    /**
     * 
     * @type {StaffingCodeInput}
     * @memberof StaffingPlanApiStaffingPlaninfo
     */
    readonly staffingCodeInput?: StaffingCodeInput
}

/**
 * StaffingPlanApi - object-oriented interface
 * @export
 * @class StaffingPlanApi
 * @extends {BaseAPI}
 */
export class StaffingPlanApi extends BaseAPI {
    /**
     * 
     * @summary 删除
     * @param {StaffingPlanApiStaffingPlanDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffingPlanApi
     */
    public staffingPlanDelete(requestParameters: StaffingPlanApiStaffingPlanDeleteRequest = {}, options?: any) {
        return StaffingPlanApiFp(this.configuration).staffingPlanDelete(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据ID查询对象
     * @param {StaffingPlanApiStaffingPlanIdInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffingPlanApi
     */
    public staffingPlanIdInfo(requestParameters: StaffingPlanApiStaffingPlanIdInfoRequest, options?: any) {
        return StaffingPlanApiFp(this.configuration).staffingPlanIdInfo(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Odata 查询 返回数据库表结构
     * @param {StaffingPlanApiStaffingPlanOdataAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffingPlanApi
     */
    public staffingPlanOdataAll(requestParameters: StaffingPlanApiStaffingPlanOdataAllRequest = {}, options?: any) {
        return StaffingPlanApiFp(this.configuration).staffingPlanOdataAll(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Odata 查询  带出多个动态月份
     * @param {StaffingPlanApiStaffingPlanOdataAllMonthOutputRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffingPlanApi
     */
    public staffingPlanOdataAllMonthOutput(requestParameters: StaffingPlanApiStaffingPlanOdataAllMonthOutputRequest = {}, options?: any) {
        return StaffingPlanApiFp(this.configuration).staffingPlanOdataAllMonthOutput(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Odata 查询 返回输出类结构
     * @param {StaffingPlanApiStaffingPlanOdataAllOutputRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffingPlanApi
     */
    public staffingPlanOdataAllOutput(requestParameters: StaffingPlanApiStaffingPlanOdataAllOutputRequest = {}, options?: any) {
        return StaffingPlanApiFp(this.configuration).staffingPlanOdataAllOutput(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary [Odata]Excel导出
     * @param {StaffingPlanApiStaffingPlanOdataExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffingPlanApi
     */
    public staffingPlanOdataExport(requestParameters: StaffingPlanApiStaffingPlanOdataExportRequest = {}, options?: any) {
        return StaffingPlanApiFp(this.configuration).staffingPlanOdataExport(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 保存功能 增加和修改
     * @param {StaffingPlanApiStaffingPlanSaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffingPlanApi
     */
    public staffingPlanSave(requestParameters: StaffingPlanApiStaffingPlanSaveRequest = {}, options?: any) {
        return StaffingPlanApiFp(this.configuration).staffingPlanSave(requestParameters.staffingPlanMonthDatasInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据projectNo查询对象
     * @param {StaffingPlanApiStaffingPlaninfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffingPlanApi
     */
    public staffingPlaninfo(requestParameters: StaffingPlanApiStaffingPlaninfoRequest = {}, options?: any) {
        return StaffingPlanApiFp(this.configuration).staffingPlaninfo(requestParameters.staffingCodeInput, options).then((request) => request(this.axios, this.basePath));
    }
}
