/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DisciplineInput } from '../models';
// @ts-ignore
import { IDsInput } from '../models';
// @ts-ignore
import { PageInputBase } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataDisciplineOutput } from '../models';
// @ts-ignore
import { ResultDataFileContentResult } from '../models';
// @ts-ignore
import { ResultDataIQueryableDiscipline } from '../models';
// @ts-ignore
import { ResultDataListDisciplineOutput } from '../models';
// @ts-ignore
import { ResultDataPageResultDisciplineOutput } from '../models';
/**
 * DisciplineApi - axios parameter creator
 * @export
 */
export const DisciplineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataDisciplineByIDsExport: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/Discipline/ByIDs/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataDisciplineByIDsList: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/Discipline/ByIDs/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataDisciplineDelete: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/Discipline/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataDisciplineIdInfo: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('masterDataDisciplineIdInfo', 'id', id)
            const localVarPath = `/MasterData/Discipline/{Id}/Info`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataDisciplineOdataAll: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/Discipline/Odata/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataDisciplineOdataExport: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/Discipline/Odata/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataDisciplinePageAll: async (pageInputBase?: PageInputBase, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/Discipline/Page/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pageInputBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 增加和修改
         * @param {DisciplineInput} [disciplineInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataDisciplineSave: async (disciplineInput?: DisciplineInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/Discipline/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(disciplineInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DisciplineApi - functional programming interface
 * @export
 */
export const DisciplineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DisciplineApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataDisciplineByIDsExport(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataDisciplineByIDsExport(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataDisciplineByIDsList(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListDisciplineOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataDisciplineByIDsList(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataDisciplineDelete(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataDisciplineDelete(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataDisciplineIdInfo(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataDisciplineOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataDisciplineIdInfo(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataDisciplineOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableDiscipline>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataDisciplineOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataDisciplineOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataDisciplineOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataDisciplinePageAll(pageInputBase?: PageInputBase, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataPageResultDisciplineOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataDisciplinePageAll(pageInputBase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 增加和修改
         * @param {DisciplineInput} [disciplineInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataDisciplineSave(disciplineInput?: DisciplineInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataDisciplineSave(disciplineInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DisciplineApi - factory interface
 * @export
 */
export const DisciplineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DisciplineApiFp(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataDisciplineByIDsExport(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.masterDataDisciplineByIDsExport(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataDisciplineByIDsList(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataListDisciplineOutput> {
            return localVarFp.masterDataDisciplineByIDsList(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataDisciplineDelete(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.masterDataDisciplineDelete(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataDisciplineIdInfo(id: string, options?: any): AxiosPromise<ResultDataDisciplineOutput> {
            return localVarFp.masterDataDisciplineIdInfo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataDisciplineOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableDiscipline> {
            return localVarFp.masterDataDisciplineOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataDisciplineOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.masterDataDisciplineOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataDisciplinePageAll(pageInputBase?: PageInputBase, options?: any): AxiosPromise<ResultDataPageResultDisciplineOutput> {
            return localVarFp.masterDataDisciplinePageAll(pageInputBase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 增加和修改
         * @param {DisciplineInput} [disciplineInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataDisciplineSave(disciplineInput?: DisciplineInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.masterDataDisciplineSave(disciplineInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for masterDataDisciplineByIDsExport operation in DisciplineApi.
 * @export
 * @interface DisciplineApiMasterDataDisciplineByIDsExportRequest
 */
export interface DisciplineApiMasterDataDisciplineByIDsExportRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof DisciplineApiMasterDataDisciplineByIDsExport
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for masterDataDisciplineByIDsList operation in DisciplineApi.
 * @export
 * @interface DisciplineApiMasterDataDisciplineByIDsListRequest
 */
export interface DisciplineApiMasterDataDisciplineByIDsListRequest {
    /**
     * 多个主键
     * @type {IDsInput}
     * @memberof DisciplineApiMasterDataDisciplineByIDsList
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for masterDataDisciplineDelete operation in DisciplineApi.
 * @export
 * @interface DisciplineApiMasterDataDisciplineDeleteRequest
 */
export interface DisciplineApiMasterDataDisciplineDeleteRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof DisciplineApiMasterDataDisciplineDelete
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for masterDataDisciplineIdInfo operation in DisciplineApi.
 * @export
 * @interface DisciplineApiMasterDataDisciplineIdInfoRequest
 */
export interface DisciplineApiMasterDataDisciplineIdInfoRequest {
    /**
     * 主键
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineIdInfo
     */
    readonly id: string
}

/**
 * Request parameters for masterDataDisciplineOdataAll operation in DisciplineApi.
 * @export
 * @interface DisciplineApiMasterDataDisciplineOdataAllRequest
 */
export interface DisciplineApiMasterDataDisciplineOdataAllRequest {
    /**
     * $filter
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataAll
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataAll
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataAll
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataAll
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataAll
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataAll
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataAll
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataAll
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataAll
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataAll
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataAll
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for masterDataDisciplineOdataExport operation in DisciplineApi.
 * @export
 * @interface DisciplineApiMasterDataDisciplineOdataExportRequest
 */
export interface DisciplineApiMasterDataDisciplineOdataExportRequest {
    /**
     * $filter
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataExport
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataExport
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataExport
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataExport
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataExport
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataExport
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataExport
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataExport
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataExport
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataExport
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof DisciplineApiMasterDataDisciplineOdataExport
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for masterDataDisciplinePageAll operation in DisciplineApi.
 * @export
 * @interface DisciplineApiMasterDataDisciplinePageAllRequest
 */
export interface DisciplineApiMasterDataDisciplinePageAllRequest {
    /**
     * 
     * @type {PageInputBase}
     * @memberof DisciplineApiMasterDataDisciplinePageAll
     */
    readonly pageInputBase?: PageInputBase
}

/**
 * Request parameters for masterDataDisciplineSave operation in DisciplineApi.
 * @export
 * @interface DisciplineApiMasterDataDisciplineSaveRequest
 */
export interface DisciplineApiMasterDataDisciplineSaveRequest {
    /**
     * 
     * @type {DisciplineInput}
     * @memberof DisciplineApiMasterDataDisciplineSave
     */
    readonly disciplineInput?: DisciplineInput
}

/**
 * DisciplineApi - object-oriented interface
 * @export
 * @class DisciplineApi
 * @extends {BaseAPI}
 */
export class DisciplineApi extends BaseAPI {
    /**
     * 
     * @summary 勾选部分Excel导出
     * @param {DisciplineApiMasterDataDisciplineByIDsExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisciplineApi
     */
    public masterDataDisciplineByIDsExport(requestParameters: DisciplineApiMasterDataDisciplineByIDsExportRequest = {}, options?: any) {
        return DisciplineApiFp(this.configuration).masterDataDisciplineByIDsExport(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据多个ID查询对象集合
     * @param {DisciplineApiMasterDataDisciplineByIDsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisciplineApi
     */
    public masterDataDisciplineByIDsList(requestParameters: DisciplineApiMasterDataDisciplineByIDsListRequest = {}, options?: any) {
        return DisciplineApiFp(this.configuration).masterDataDisciplineByIDsList(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除
     * @param {DisciplineApiMasterDataDisciplineDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisciplineApi
     */
    public masterDataDisciplineDelete(requestParameters: DisciplineApiMasterDataDisciplineDeleteRequest = {}, options?: any) {
        return DisciplineApiFp(this.configuration).masterDataDisciplineDelete(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据ID查询对象
     * @param {DisciplineApiMasterDataDisciplineIdInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisciplineApi
     */
    public masterDataDisciplineIdInfo(requestParameters: DisciplineApiMasterDataDisciplineIdInfoRequest, options?: any) {
        return DisciplineApiFp(this.configuration).masterDataDisciplineIdInfo(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Odata 查询
     * @param {DisciplineApiMasterDataDisciplineOdataAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisciplineApi
     */
    public masterDataDisciplineOdataAll(requestParameters: DisciplineApiMasterDataDisciplineOdataAllRequest = {}, options?: any) {
        return DisciplineApiFp(this.configuration).masterDataDisciplineOdataAll(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary [Odata]Excel导出
     * @param {DisciplineApiMasterDataDisciplineOdataExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisciplineApi
     */
    public masterDataDisciplineOdataExport(requestParameters: DisciplineApiMasterDataDisciplineOdataExportRequest = {}, options?: any) {
        return DisciplineApiFp(this.configuration).masterDataDisciplineOdataExport(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 数据库 分页查询
     * @param {DisciplineApiMasterDataDisciplinePageAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisciplineApi
     */
    public masterDataDisciplinePageAll(requestParameters: DisciplineApiMasterDataDisciplinePageAllRequest = {}, options?: any) {
        return DisciplineApiFp(this.configuration).masterDataDisciplinePageAll(requestParameters.pageInputBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 增加和修改
     * @param {DisciplineApiMasterDataDisciplineSaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisciplineApi
     */
    public masterDataDisciplineSave(requestParameters: DisciplineApiMasterDataDisciplineSaveRequest = {}, options?: any) {
        return DisciplineApiFp(this.configuration).masterDataDisciplineSave(requestParameters.disciplineInput, options).then((request) => request(this.axios, this.basePath));
    }
}
