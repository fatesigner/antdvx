/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ChangeOldUserPasswordParm } from '../models';
// @ts-ignore
import { ChangeUserPasswordParm } from '../models';
// @ts-ignore
import { IDslongInput } from '../models';
// @ts-ignore
import { RegisterUserInput } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataIQueryableSysUserOutput } from '../models';
// @ts-ignore
import { ResultDataObject } from '../models';
// @ts-ignore
import { ResultDataSysUserOutput } from '../models';
// @ts-ignore
import { SysUserInput } from '../models';
// @ts-ignore
import { UpdateUserStatusParm } from '../models';
// @ts-ignore
import { UpdateUserTypeParm } from '../models';
// @ts-ignore
import { UserRoleInput } from '../models';
/**
 * SysUserApi - axios parameter creator
 * @export
 */
export const SysUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 修改用户状态(修改Status)
         * @param {UpdateUserStatusParm} [updateUserStatusParm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserChangeStatus: async (updateUserStatusParm?: UpdateUserStatusParm, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/User/ChangeStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserStatusParm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除用户
         * @param {IDslongInput} [iDslongInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserDelete: async (iDslongInput?: IDslongInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/User/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDslongInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 授权用户角色
         * @param {UserRoleInput} [userRoleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserGrantRole: async (userRoleInput?: UserRoleInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/User/GrantRole`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRoleInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Odata查询用户
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserOdataAll: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/User/Odata/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Odata查询用户(带角色)
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserOdataDataAll: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/User/Odata/DataAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 注册用户
         * @param {RegisterUserInput} [registerUserInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserRegister: async (registerUserInput?: RegisterUserInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/User/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerUserInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 重置为默认密码
         * @param {ChangeUserPasswordParm} [changeUserPasswordParm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserResetUserPwd: async (changeUserPasswordParm?: ChangeUserPasswordParm, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/User/ResetUserPwd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeUserPasswordParm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新用户
         * @param {SysUserInput} [sysUserInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserUpdate: async (sysUserInput?: SysUserInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/User/Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sysUserInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改用户账号类型(修改AdminType)
         * @param {UpdateUserTypeParm} [updateUserTypeParm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserUpdateAdminType: async (updateUserTypeParm?: UpdateUserTypeParm, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/User/UpdateAdminType`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserTypeParm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 修改用户密码
         * @param {ChangeOldUserPasswordParm} [changeOldUserPasswordParm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserUpdateUserPwd: async (changeOldUserPasswordParm?: ChangeOldUserPasswordParm, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/User/UpdateUserPwd`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeOldUserPasswordParm, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据账号获取用户
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUseraccountinfo: async (account: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'account' is not null or undefined
            assertParamExists('systemManageUseraccountinfo', 'account', account)
            const localVarPath = `/SystemManage/User/{account}/info`
                .replace(`{${"account"}}`, encodeURIComponent(String(account)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SysUserApi - functional programming interface
 * @export
 */
export const SysUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SysUserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 修改用户状态(修改Status)
         * @param {UpdateUserStatusParm} [updateUserStatusParm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageUserChangeStatus(updateUserStatusParm?: UpdateUserStatusParm, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageUserChangeStatus(updateUserStatusParm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 删除用户
         * @param {IDslongInput} [iDslongInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageUserDelete(iDslongInput?: IDslongInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageUserDelete(iDslongInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 授权用户角色
         * @param {UserRoleInput} [userRoleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageUserGrantRole(userRoleInput?: UserRoleInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageUserGrantRole(userRoleInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Odata查询用户
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageUserOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableSysUserOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageUserOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Odata查询用户(带角色)
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageUserOdataDataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableSysUserOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageUserOdataDataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 注册用户
         * @param {RegisterUserInput} [registerUserInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageUserRegister(registerUserInput?: RegisterUserInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataSysUserOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageUserRegister(registerUserInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 重置为默认密码
         * @param {ChangeUserPasswordParm} [changeUserPasswordParm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageUserResetUserPwd(changeUserPasswordParm?: ChangeUserPasswordParm, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageUserResetUserPwd(changeUserPasswordParm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 更新用户
         * @param {SysUserInput} [sysUserInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageUserUpdate(sysUserInput?: SysUserInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageUserUpdate(sysUserInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 修改用户账号类型(修改AdminType)
         * @param {UpdateUserTypeParm} [updateUserTypeParm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageUserUpdateAdminType(updateUserTypeParm?: UpdateUserTypeParm, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageUserUpdateAdminType(updateUserTypeParm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 修改用户密码
         * @param {ChangeOldUserPasswordParm} [changeOldUserPasswordParm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageUserUpdateUserPwd(changeOldUserPasswordParm?: ChangeOldUserPasswordParm, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageUserUpdateUserPwd(changeOldUserPasswordParm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据账号获取用户
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageUseraccountinfo(account: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageUseraccountinfo(account, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SysUserApi - factory interface
 * @export
 */
export const SysUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SysUserApiFp(configuration)
    return {
        /**
         * 
         * @summary 修改用户状态(修改Status)
         * @param {UpdateUserStatusParm} [updateUserStatusParm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserChangeStatus(updateUserStatusParm?: UpdateUserStatusParm, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.systemManageUserChangeStatus(updateUserStatusParm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除用户
         * @param {IDslongInput} [iDslongInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserDelete(iDslongInput?: IDslongInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.systemManageUserDelete(iDslongInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 授权用户角色
         * @param {UserRoleInput} [userRoleInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserGrantRole(userRoleInput?: UserRoleInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.systemManageUserGrantRole(userRoleInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Odata查询用户
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableSysUserOutput> {
            return localVarFp.systemManageUserOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Odata查询用户(带角色)
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserOdataDataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableSysUserOutput> {
            return localVarFp.systemManageUserOdataDataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 注册用户
         * @param {RegisterUserInput} [registerUserInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserRegister(registerUserInput?: RegisterUserInput, options?: any): AxiosPromise<ResultDataSysUserOutput> {
            return localVarFp.systemManageUserRegister(registerUserInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 重置为默认密码
         * @param {ChangeUserPasswordParm} [changeUserPasswordParm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserResetUserPwd(changeUserPasswordParm?: ChangeUserPasswordParm, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.systemManageUserResetUserPwd(changeUserPasswordParm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新用户
         * @param {SysUserInput} [sysUserInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserUpdate(sysUserInput?: SysUserInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.systemManageUserUpdate(sysUserInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改用户账号类型(修改AdminType)
         * @param {UpdateUserTypeParm} [updateUserTypeParm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserUpdateAdminType(updateUserTypeParm?: UpdateUserTypeParm, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.systemManageUserUpdateAdminType(updateUserTypeParm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 修改用户密码
         * @param {ChangeOldUserPasswordParm} [changeOldUserPasswordParm] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUserUpdateUserPwd(changeOldUserPasswordParm?: ChangeOldUserPasswordParm, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.systemManageUserUpdateUserPwd(changeOldUserPasswordParm, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据账号获取用户
         * @param {string} account 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageUseraccountinfo(account: string, options?: any): AxiosPromise<ResultDataObject> {
            return localVarFp.systemManageUseraccountinfo(account, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for systemManageUserChangeStatus operation in SysUserApi.
 * @export
 * @interface SysUserApiSystemManageUserChangeStatusRequest
 */
export interface SysUserApiSystemManageUserChangeStatusRequest {
    /**
     * 
     * @type {UpdateUserStatusParm}
     * @memberof SysUserApiSystemManageUserChangeStatus
     */
    readonly updateUserStatusParm?: UpdateUserStatusParm
}

/**
 * Request parameters for systemManageUserDelete operation in SysUserApi.
 * @export
 * @interface SysUserApiSystemManageUserDeleteRequest
 */
export interface SysUserApiSystemManageUserDeleteRequest {
    /**
     * 
     * @type {IDslongInput}
     * @memberof SysUserApiSystemManageUserDelete
     */
    readonly iDslongInput?: IDslongInput
}

/**
 * Request parameters for systemManageUserGrantRole operation in SysUserApi.
 * @export
 * @interface SysUserApiSystemManageUserGrantRoleRequest
 */
export interface SysUserApiSystemManageUserGrantRoleRequest {
    /**
     * 
     * @type {UserRoleInput}
     * @memberof SysUserApiSystemManageUserGrantRole
     */
    readonly userRoleInput?: UserRoleInput
}

/**
 * Request parameters for systemManageUserOdataAll operation in SysUserApi.
 * @export
 * @interface SysUserApiSystemManageUserOdataAllRequest
 */
export interface SysUserApiSystemManageUserOdataAllRequest {
    /**
     * $filter
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataAll
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataAll
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataAll
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataAll
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataAll
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataAll
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataAll
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataAll
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataAll
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataAll
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataAll
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for systemManageUserOdataDataAll operation in SysUserApi.
 * @export
 * @interface SysUserApiSystemManageUserOdataDataAllRequest
 */
export interface SysUserApiSystemManageUserOdataDataAllRequest {
    /**
     * $filter
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataDataAll
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataDataAll
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataDataAll
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataDataAll
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataDataAll
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataDataAll
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataDataAll
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataDataAll
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataDataAll
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataDataAll
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof SysUserApiSystemManageUserOdataDataAll
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for systemManageUserRegister operation in SysUserApi.
 * @export
 * @interface SysUserApiSystemManageUserRegisterRequest
 */
export interface SysUserApiSystemManageUserRegisterRequest {
    /**
     * 
     * @type {RegisterUserInput}
     * @memberof SysUserApiSystemManageUserRegister
     */
    readonly registerUserInput?: RegisterUserInput
}

/**
 * Request parameters for systemManageUserResetUserPwd operation in SysUserApi.
 * @export
 * @interface SysUserApiSystemManageUserResetUserPwdRequest
 */
export interface SysUserApiSystemManageUserResetUserPwdRequest {
    /**
     * 
     * @type {ChangeUserPasswordParm}
     * @memberof SysUserApiSystemManageUserResetUserPwd
     */
    readonly changeUserPasswordParm?: ChangeUserPasswordParm
}

/**
 * Request parameters for systemManageUserUpdate operation in SysUserApi.
 * @export
 * @interface SysUserApiSystemManageUserUpdateRequest
 */
export interface SysUserApiSystemManageUserUpdateRequest {
    /**
     * 
     * @type {SysUserInput}
     * @memberof SysUserApiSystemManageUserUpdate
     */
    readonly sysUserInput?: SysUserInput
}

/**
 * Request parameters for systemManageUserUpdateAdminType operation in SysUserApi.
 * @export
 * @interface SysUserApiSystemManageUserUpdateAdminTypeRequest
 */
export interface SysUserApiSystemManageUserUpdateAdminTypeRequest {
    /**
     * 
     * @type {UpdateUserTypeParm}
     * @memberof SysUserApiSystemManageUserUpdateAdminType
     */
    readonly updateUserTypeParm?: UpdateUserTypeParm
}

/**
 * Request parameters for systemManageUserUpdateUserPwd operation in SysUserApi.
 * @export
 * @interface SysUserApiSystemManageUserUpdateUserPwdRequest
 */
export interface SysUserApiSystemManageUserUpdateUserPwdRequest {
    /**
     * 
     * @type {ChangeOldUserPasswordParm}
     * @memberof SysUserApiSystemManageUserUpdateUserPwd
     */
    readonly changeOldUserPasswordParm?: ChangeOldUserPasswordParm
}

/**
 * Request parameters for systemManageUseraccountinfo operation in SysUserApi.
 * @export
 * @interface SysUserApiSystemManageUseraccountinfoRequest
 */
export interface SysUserApiSystemManageUseraccountinfoRequest {
    /**
     * 
     * @type {string}
     * @memberof SysUserApiSystemManageUseraccountinfo
     */
    readonly account: string
}

/**
 * SysUserApi - object-oriented interface
 * @export
 * @class SysUserApi
 * @extends {BaseAPI}
 */
export class SysUserApi extends BaseAPI {
    /**
     * 
     * @summary 修改用户状态(修改Status)
     * @param {SysUserApiSystemManageUserChangeStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserApi
     */
    public systemManageUserChangeStatus(requestParameters: SysUserApiSystemManageUserChangeStatusRequest = {}, options?: any) {
        return SysUserApiFp(this.configuration).systemManageUserChangeStatus(requestParameters.updateUserStatusParm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除用户
     * @param {SysUserApiSystemManageUserDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserApi
     */
    public systemManageUserDelete(requestParameters: SysUserApiSystemManageUserDeleteRequest = {}, options?: any) {
        return SysUserApiFp(this.configuration).systemManageUserDelete(requestParameters.iDslongInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 授权用户角色
     * @param {SysUserApiSystemManageUserGrantRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserApi
     */
    public systemManageUserGrantRole(requestParameters: SysUserApiSystemManageUserGrantRoleRequest = {}, options?: any) {
        return SysUserApiFp(this.configuration).systemManageUserGrantRole(requestParameters.userRoleInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Odata查询用户
     * @param {SysUserApiSystemManageUserOdataAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserApi
     */
    public systemManageUserOdataAll(requestParameters: SysUserApiSystemManageUserOdataAllRequest = {}, options?: any) {
        return SysUserApiFp(this.configuration).systemManageUserOdataAll(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Odata查询用户(带角色)
     * @param {SysUserApiSystemManageUserOdataDataAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserApi
     */
    public systemManageUserOdataDataAll(requestParameters: SysUserApiSystemManageUserOdataDataAllRequest = {}, options?: any) {
        return SysUserApiFp(this.configuration).systemManageUserOdataDataAll(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 注册用户
     * @param {SysUserApiSystemManageUserRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserApi
     */
    public systemManageUserRegister(requestParameters: SysUserApiSystemManageUserRegisterRequest = {}, options?: any) {
        return SysUserApiFp(this.configuration).systemManageUserRegister(requestParameters.registerUserInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 重置为默认密码
     * @param {SysUserApiSystemManageUserResetUserPwdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserApi
     */
    public systemManageUserResetUserPwd(requestParameters: SysUserApiSystemManageUserResetUserPwdRequest = {}, options?: any) {
        return SysUserApiFp(this.configuration).systemManageUserResetUserPwd(requestParameters.changeUserPasswordParm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新用户
     * @param {SysUserApiSystemManageUserUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserApi
     */
    public systemManageUserUpdate(requestParameters: SysUserApiSystemManageUserUpdateRequest = {}, options?: any) {
        return SysUserApiFp(this.configuration).systemManageUserUpdate(requestParameters.sysUserInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改用户账号类型(修改AdminType)
     * @param {SysUserApiSystemManageUserUpdateAdminTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserApi
     */
    public systemManageUserUpdateAdminType(requestParameters: SysUserApiSystemManageUserUpdateAdminTypeRequest = {}, options?: any) {
        return SysUserApiFp(this.configuration).systemManageUserUpdateAdminType(requestParameters.updateUserTypeParm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 修改用户密码
     * @param {SysUserApiSystemManageUserUpdateUserPwdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserApi
     */
    public systemManageUserUpdateUserPwd(requestParameters: SysUserApiSystemManageUserUpdateUserPwdRequest = {}, options?: any) {
        return SysUserApiFp(this.configuration).systemManageUserUpdateUserPwd(requestParameters.changeOldUserPasswordParm, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据账号获取用户
     * @param {SysUserApiSystemManageUseraccountinfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysUserApi
     */
    public systemManageUseraccountinfo(requestParameters: SysUserApiSystemManageUseraccountinfoRequest, options?: any) {
        return SysUserApiFp(this.configuration).systemManageUseraccountinfo(requestParameters.account, options).then((request) => request(this.axios, this.basePath));
    }
}
