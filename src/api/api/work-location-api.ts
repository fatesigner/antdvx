/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IDsInput } from '../models';
// @ts-ignore
import { PageInputBase } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataFileContentResult } from '../models';
// @ts-ignore
import { ResultDataIQueryableWorkLocation } from '../models';
// @ts-ignore
import { ResultDataListWorkLocationOutput } from '../models';
// @ts-ignore
import { ResultDataPageResultWorkLocationOutput } from '../models';
// @ts-ignore
import { ResultDataWorkLocationOutput } from '../models';
// @ts-ignore
import { WorkLocationInput } from '../models';
/**
 * WorkLocationApi - axios parameter creator
 * @export
 */
export const WorkLocationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataWorkLocationByIDsExport: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/WorkLocation/ByIDs/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataWorkLocationByIDsList: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/WorkLocation/ByIDs/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataWorkLocationDelete: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/WorkLocation/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataWorkLocationIdInfo: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('masterDataWorkLocationIdInfo', 'id', id)
            const localVarPath = `/MasterData/WorkLocation/{Id}/Info`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataWorkLocationOdataAll: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/WorkLocation/Odata/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataWorkLocationOdataExport: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/WorkLocation/Odata/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataWorkLocationPageAll: async (pageInputBase?: PageInputBase, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/WorkLocation/Page/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pageInputBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 增加和修改
         * @param {WorkLocationInput} [workLocationInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataWorkLocationSave: async (workLocationInput?: WorkLocationInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/WorkLocation/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workLocationInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkLocationApi - functional programming interface
 * @export
 */
export const WorkLocationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkLocationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataWorkLocationByIDsExport(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataWorkLocationByIDsExport(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataWorkLocationByIDsList(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListWorkLocationOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataWorkLocationByIDsList(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataWorkLocationDelete(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataWorkLocationDelete(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataWorkLocationIdInfo(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataWorkLocationOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataWorkLocationIdInfo(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataWorkLocationOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableWorkLocation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataWorkLocationOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataWorkLocationOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataWorkLocationOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataWorkLocationPageAll(pageInputBase?: PageInputBase, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataPageResultWorkLocationOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataWorkLocationPageAll(pageInputBase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 增加和修改
         * @param {WorkLocationInput} [workLocationInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataWorkLocationSave(workLocationInput?: WorkLocationInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataWorkLocationSave(workLocationInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkLocationApi - factory interface
 * @export
 */
export const WorkLocationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkLocationApiFp(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataWorkLocationByIDsExport(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.masterDataWorkLocationByIDsExport(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataWorkLocationByIDsList(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataListWorkLocationOutput> {
            return localVarFp.masterDataWorkLocationByIDsList(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataWorkLocationDelete(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.masterDataWorkLocationDelete(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataWorkLocationIdInfo(id: string, options?: any): AxiosPromise<ResultDataWorkLocationOutput> {
            return localVarFp.masterDataWorkLocationIdInfo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataWorkLocationOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableWorkLocation> {
            return localVarFp.masterDataWorkLocationOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataWorkLocationOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.masterDataWorkLocationOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataWorkLocationPageAll(pageInputBase?: PageInputBase, options?: any): AxiosPromise<ResultDataPageResultWorkLocationOutput> {
            return localVarFp.masterDataWorkLocationPageAll(pageInputBase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 增加和修改
         * @param {WorkLocationInput} [workLocationInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataWorkLocationSave(workLocationInput?: WorkLocationInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.masterDataWorkLocationSave(workLocationInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for masterDataWorkLocationByIDsExport operation in WorkLocationApi.
 * @export
 * @interface WorkLocationApiMasterDataWorkLocationByIDsExportRequest
 */
export interface WorkLocationApiMasterDataWorkLocationByIDsExportRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof WorkLocationApiMasterDataWorkLocationByIDsExport
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for masterDataWorkLocationByIDsList operation in WorkLocationApi.
 * @export
 * @interface WorkLocationApiMasterDataWorkLocationByIDsListRequest
 */
export interface WorkLocationApiMasterDataWorkLocationByIDsListRequest {
    /**
     * 多个主键
     * @type {IDsInput}
     * @memberof WorkLocationApiMasterDataWorkLocationByIDsList
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for masterDataWorkLocationDelete operation in WorkLocationApi.
 * @export
 * @interface WorkLocationApiMasterDataWorkLocationDeleteRequest
 */
export interface WorkLocationApiMasterDataWorkLocationDeleteRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof WorkLocationApiMasterDataWorkLocationDelete
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for masterDataWorkLocationIdInfo operation in WorkLocationApi.
 * @export
 * @interface WorkLocationApiMasterDataWorkLocationIdInfoRequest
 */
export interface WorkLocationApiMasterDataWorkLocationIdInfoRequest {
    /**
     * 主键
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationIdInfo
     */
    readonly id: string
}

/**
 * Request parameters for masterDataWorkLocationOdataAll operation in WorkLocationApi.
 * @export
 * @interface WorkLocationApiMasterDataWorkLocationOdataAllRequest
 */
export interface WorkLocationApiMasterDataWorkLocationOdataAllRequest {
    /**
     * $filter
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataAll
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataAll
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataAll
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataAll
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataAll
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataAll
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataAll
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataAll
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataAll
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataAll
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataAll
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for masterDataWorkLocationOdataExport operation in WorkLocationApi.
 * @export
 * @interface WorkLocationApiMasterDataWorkLocationOdataExportRequest
 */
export interface WorkLocationApiMasterDataWorkLocationOdataExportRequest {
    /**
     * $filter
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataExport
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataExport
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataExport
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataExport
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataExport
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataExport
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataExport
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataExport
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataExport
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataExport
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof WorkLocationApiMasterDataWorkLocationOdataExport
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for masterDataWorkLocationPageAll operation in WorkLocationApi.
 * @export
 * @interface WorkLocationApiMasterDataWorkLocationPageAllRequest
 */
export interface WorkLocationApiMasterDataWorkLocationPageAllRequest {
    /**
     * 
     * @type {PageInputBase}
     * @memberof WorkLocationApiMasterDataWorkLocationPageAll
     */
    readonly pageInputBase?: PageInputBase
}

/**
 * Request parameters for masterDataWorkLocationSave operation in WorkLocationApi.
 * @export
 * @interface WorkLocationApiMasterDataWorkLocationSaveRequest
 */
export interface WorkLocationApiMasterDataWorkLocationSaveRequest {
    /**
     * 
     * @type {WorkLocationInput}
     * @memberof WorkLocationApiMasterDataWorkLocationSave
     */
    readonly workLocationInput?: WorkLocationInput
}

/**
 * WorkLocationApi - object-oriented interface
 * @export
 * @class WorkLocationApi
 * @extends {BaseAPI}
 */
export class WorkLocationApi extends BaseAPI {
    /**
     * 
     * @summary 勾选部分Excel导出
     * @param {WorkLocationApiMasterDataWorkLocationByIDsExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkLocationApi
     */
    public masterDataWorkLocationByIDsExport(requestParameters: WorkLocationApiMasterDataWorkLocationByIDsExportRequest = {}, options?: any) {
        return WorkLocationApiFp(this.configuration).masterDataWorkLocationByIDsExport(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据多个ID查询对象集合
     * @param {WorkLocationApiMasterDataWorkLocationByIDsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkLocationApi
     */
    public masterDataWorkLocationByIDsList(requestParameters: WorkLocationApiMasterDataWorkLocationByIDsListRequest = {}, options?: any) {
        return WorkLocationApiFp(this.configuration).masterDataWorkLocationByIDsList(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除
     * @param {WorkLocationApiMasterDataWorkLocationDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkLocationApi
     */
    public masterDataWorkLocationDelete(requestParameters: WorkLocationApiMasterDataWorkLocationDeleteRequest = {}, options?: any) {
        return WorkLocationApiFp(this.configuration).masterDataWorkLocationDelete(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据ID查询对象
     * @param {WorkLocationApiMasterDataWorkLocationIdInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkLocationApi
     */
    public masterDataWorkLocationIdInfo(requestParameters: WorkLocationApiMasterDataWorkLocationIdInfoRequest, options?: any) {
        return WorkLocationApiFp(this.configuration).masterDataWorkLocationIdInfo(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Odata 查询
     * @param {WorkLocationApiMasterDataWorkLocationOdataAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkLocationApi
     */
    public masterDataWorkLocationOdataAll(requestParameters: WorkLocationApiMasterDataWorkLocationOdataAllRequest = {}, options?: any) {
        return WorkLocationApiFp(this.configuration).masterDataWorkLocationOdataAll(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary [Odata]Excel导出
     * @param {WorkLocationApiMasterDataWorkLocationOdataExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkLocationApi
     */
    public masterDataWorkLocationOdataExport(requestParameters: WorkLocationApiMasterDataWorkLocationOdataExportRequest = {}, options?: any) {
        return WorkLocationApiFp(this.configuration).masterDataWorkLocationOdataExport(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 数据库 分页查询
     * @param {WorkLocationApiMasterDataWorkLocationPageAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkLocationApi
     */
    public masterDataWorkLocationPageAll(requestParameters: WorkLocationApiMasterDataWorkLocationPageAllRequest = {}, options?: any) {
        return WorkLocationApiFp(this.configuration).masterDataWorkLocationPageAll(requestParameters.pageInputBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 增加和修改
     * @param {WorkLocationApiMasterDataWorkLocationSaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkLocationApi
     */
    public masterDataWorkLocationSave(requestParameters: WorkLocationApiMasterDataWorkLocationSaveRequest = {}, options?: any) {
        return WorkLocationApiFp(this.configuration).masterDataWorkLocationSave(requestParameters.workLocationInput, options).then((request) => request(this.axios, this.basePath));
    }
}
