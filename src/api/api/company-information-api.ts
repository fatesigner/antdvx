/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CompanyInformationInput } from '../models';
// @ts-ignore
import { IDsInput } from '../models';
// @ts-ignore
import { PageInputBase } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataCompanyInformationOutput } from '../models';
// @ts-ignore
import { ResultDataFileContentResult } from '../models';
// @ts-ignore
import { ResultDataIQueryableCompanyInformation } from '../models';
// @ts-ignore
import { ResultDataListCompanyInformationOutput } from '../models';
// @ts-ignore
import { ResultDataPageResultCompanyInformationOutput } from '../models';
/**
 * CompanyInformationApi - axios parameter creator
 * @export
 */
export const CompanyInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataCompanyInformationByIDsExport: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/CompanyInformation/ByIDs/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataCompanyInformationByIDsList: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/CompanyInformation/ByIDs/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataCompanyInformationDelete: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/CompanyInformation/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataCompanyInformationIdInfo: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('masterDataCompanyInformationIdInfo', 'id', id)
            const localVarPath = `/MasterData/CompanyInformation/{Id}/Info`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataCompanyInformationOdataAll: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/CompanyInformation/Odata/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataCompanyInformationOdataExport: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/CompanyInformation/Odata/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataCompanyInformationPageAll: async (pageInputBase?: PageInputBase, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/CompanyInformation/Page/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pageInputBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 增加和修改
         * @param {CompanyInformationInput} [companyInformationInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataCompanyInformationSave: async (companyInformationInput?: CompanyInformationInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/MasterData/CompanyInformation/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(companyInformationInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyInformationApi - functional programming interface
 * @export
 */
export const CompanyInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataCompanyInformationByIDsExport(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataCompanyInformationByIDsExport(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataCompanyInformationByIDsList(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListCompanyInformationOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataCompanyInformationByIDsList(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataCompanyInformationDelete(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataCompanyInformationDelete(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataCompanyInformationIdInfo(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataCompanyInformationOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataCompanyInformationIdInfo(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataCompanyInformationOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableCompanyInformation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataCompanyInformationOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataCompanyInformationOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataCompanyInformationOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataCompanyInformationPageAll(pageInputBase?: PageInputBase, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataPageResultCompanyInformationOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataCompanyInformationPageAll(pageInputBase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 增加和修改
         * @param {CompanyInformationInput} [companyInformationInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async masterDataCompanyInformationSave(companyInformationInput?: CompanyInformationInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.masterDataCompanyInformationSave(companyInformationInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyInformationApi - factory interface
 * @export
 */
export const CompanyInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyInformationApiFp(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataCompanyInformationByIDsExport(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.masterDataCompanyInformationByIDsExport(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataCompanyInformationByIDsList(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataListCompanyInformationOutput> {
            return localVarFp.masterDataCompanyInformationByIDsList(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataCompanyInformationDelete(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.masterDataCompanyInformationDelete(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataCompanyInformationIdInfo(id: string, options?: any): AxiosPromise<ResultDataCompanyInformationOutput> {
            return localVarFp.masterDataCompanyInformationIdInfo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataCompanyInformationOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableCompanyInformation> {
            return localVarFp.masterDataCompanyInformationOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataCompanyInformationOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.masterDataCompanyInformationOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataCompanyInformationPageAll(pageInputBase?: PageInputBase, options?: any): AxiosPromise<ResultDataPageResultCompanyInformationOutput> {
            return localVarFp.masterDataCompanyInformationPageAll(pageInputBase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 增加和修改
         * @param {CompanyInformationInput} [companyInformationInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        masterDataCompanyInformationSave(companyInformationInput?: CompanyInformationInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.masterDataCompanyInformationSave(companyInformationInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for masterDataCompanyInformationByIDsExport operation in CompanyInformationApi.
 * @export
 * @interface CompanyInformationApiMasterDataCompanyInformationByIDsExportRequest
 */
export interface CompanyInformationApiMasterDataCompanyInformationByIDsExportRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof CompanyInformationApiMasterDataCompanyInformationByIDsExport
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for masterDataCompanyInformationByIDsList operation in CompanyInformationApi.
 * @export
 * @interface CompanyInformationApiMasterDataCompanyInformationByIDsListRequest
 */
export interface CompanyInformationApiMasterDataCompanyInformationByIDsListRequest {
    /**
     * 多个主键
     * @type {IDsInput}
     * @memberof CompanyInformationApiMasterDataCompanyInformationByIDsList
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for masterDataCompanyInformationDelete operation in CompanyInformationApi.
 * @export
 * @interface CompanyInformationApiMasterDataCompanyInformationDeleteRequest
 */
export interface CompanyInformationApiMasterDataCompanyInformationDeleteRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof CompanyInformationApiMasterDataCompanyInformationDelete
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for masterDataCompanyInformationIdInfo operation in CompanyInformationApi.
 * @export
 * @interface CompanyInformationApiMasterDataCompanyInformationIdInfoRequest
 */
export interface CompanyInformationApiMasterDataCompanyInformationIdInfoRequest {
    /**
     * 主键
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationIdInfo
     */
    readonly id: string
}

/**
 * Request parameters for masterDataCompanyInformationOdataAll operation in CompanyInformationApi.
 * @export
 * @interface CompanyInformationApiMasterDataCompanyInformationOdataAllRequest
 */
export interface CompanyInformationApiMasterDataCompanyInformationOdataAllRequest {
    /**
     * $filter
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataAll
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataAll
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataAll
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataAll
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataAll
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataAll
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataAll
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataAll
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataAll
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataAll
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataAll
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for masterDataCompanyInformationOdataExport operation in CompanyInformationApi.
 * @export
 * @interface CompanyInformationApiMasterDataCompanyInformationOdataExportRequest
 */
export interface CompanyInformationApiMasterDataCompanyInformationOdataExportRequest {
    /**
     * $filter
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataExport
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataExport
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataExport
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataExport
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataExport
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataExport
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataExport
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataExport
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataExport
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataExport
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof CompanyInformationApiMasterDataCompanyInformationOdataExport
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for masterDataCompanyInformationPageAll operation in CompanyInformationApi.
 * @export
 * @interface CompanyInformationApiMasterDataCompanyInformationPageAllRequest
 */
export interface CompanyInformationApiMasterDataCompanyInformationPageAllRequest {
    /**
     * 
     * @type {PageInputBase}
     * @memberof CompanyInformationApiMasterDataCompanyInformationPageAll
     */
    readonly pageInputBase?: PageInputBase
}

/**
 * Request parameters for masterDataCompanyInformationSave operation in CompanyInformationApi.
 * @export
 * @interface CompanyInformationApiMasterDataCompanyInformationSaveRequest
 */
export interface CompanyInformationApiMasterDataCompanyInformationSaveRequest {
    /**
     * 
     * @type {CompanyInformationInput}
     * @memberof CompanyInformationApiMasterDataCompanyInformationSave
     */
    readonly companyInformationInput?: CompanyInformationInput
}

/**
 * CompanyInformationApi - object-oriented interface
 * @export
 * @class CompanyInformationApi
 * @extends {BaseAPI}
 */
export class CompanyInformationApi extends BaseAPI {
    /**
     * 
     * @summary 勾选部分Excel导出
     * @param {CompanyInformationApiMasterDataCompanyInformationByIDsExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyInformationApi
     */
    public masterDataCompanyInformationByIDsExport(requestParameters: CompanyInformationApiMasterDataCompanyInformationByIDsExportRequest = {}, options?: any) {
        return CompanyInformationApiFp(this.configuration).masterDataCompanyInformationByIDsExport(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据多个ID查询对象集合
     * @param {CompanyInformationApiMasterDataCompanyInformationByIDsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyInformationApi
     */
    public masterDataCompanyInformationByIDsList(requestParameters: CompanyInformationApiMasterDataCompanyInformationByIDsListRequest = {}, options?: any) {
        return CompanyInformationApiFp(this.configuration).masterDataCompanyInformationByIDsList(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除
     * @param {CompanyInformationApiMasterDataCompanyInformationDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyInformationApi
     */
    public masterDataCompanyInformationDelete(requestParameters: CompanyInformationApiMasterDataCompanyInformationDeleteRequest = {}, options?: any) {
        return CompanyInformationApiFp(this.configuration).masterDataCompanyInformationDelete(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据ID查询对象
     * @param {CompanyInformationApiMasterDataCompanyInformationIdInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyInformationApi
     */
    public masterDataCompanyInformationIdInfo(requestParameters: CompanyInformationApiMasterDataCompanyInformationIdInfoRequest, options?: any) {
        return CompanyInformationApiFp(this.configuration).masterDataCompanyInformationIdInfo(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Odata 查询
     * @param {CompanyInformationApiMasterDataCompanyInformationOdataAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyInformationApi
     */
    public masterDataCompanyInformationOdataAll(requestParameters: CompanyInformationApiMasterDataCompanyInformationOdataAllRequest = {}, options?: any) {
        return CompanyInformationApiFp(this.configuration).masterDataCompanyInformationOdataAll(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary [Odata]Excel导出
     * @param {CompanyInformationApiMasterDataCompanyInformationOdataExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyInformationApi
     */
    public masterDataCompanyInformationOdataExport(requestParameters: CompanyInformationApiMasterDataCompanyInformationOdataExportRequest = {}, options?: any) {
        return CompanyInformationApiFp(this.configuration).masterDataCompanyInformationOdataExport(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 数据库 分页查询
     * @param {CompanyInformationApiMasterDataCompanyInformationPageAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyInformationApi
     */
    public masterDataCompanyInformationPageAll(requestParameters: CompanyInformationApiMasterDataCompanyInformationPageAllRequest = {}, options?: any) {
        return CompanyInformationApiFp(this.configuration).masterDataCompanyInformationPageAll(requestParameters.pageInputBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 增加和修改
     * @param {CompanyInformationApiMasterDataCompanyInformationSaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyInformationApi
     */
    public masterDataCompanyInformationSave(requestParameters: CompanyInformationApiMasterDataCompanyInformationSaveRequest = {}, options?: any) {
        return CompanyInformationApiFp(this.configuration).masterDataCompanyInformationSave(requestParameters.companyInformationInput, options).then((request) => request(this.axios, this.basePath));
    }
}
