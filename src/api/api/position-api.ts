/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IDsStringInput } from '../models';
// @ts-ignore
import { PageInputBase } from '../models';
// @ts-ignore
import { PositionInput } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataFileContentResult } from '../models';
// @ts-ignore
import { ResultDataIQueryablePosition } from '../models';
// @ts-ignore
import { ResultDataListPositionOutput } from '../models';
// @ts-ignore
import { ResultDataPageResultPositionOutput } from '../models';
// @ts-ignore
import { ResultDataPositionOutput } from '../models';
/**
 * PositionApi - axios parameter creator
 * @export
 */
export const PositionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary 勾选部分Excel导出
         * @param {IDsStringInput} [iDsInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataPositionByIDsExport: async (iDsInput?: IDsStringInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/Position/ByIDs/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 根据多个ID查询对象集合
         * @param {IDsStringInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataPositionByIDsList: async (iDsInput?: IDsStringInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/Position/ByIDs/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 删除
         * @param {IDsStringInput} [iDsInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataPositionDelete: async (iDsInput?: IDsStringInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/Position/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataPositionIdInfo: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectMasterDataPositionIdInfo', 'id', id)
            const localVarPath = `/ProjectMasterData/Position/{Id}/Info`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataPositionOdataAll: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/Position/Odata/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataPositionOdataExport: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/Position/Odata/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataPositionPageAll: async (pageInputBase?: PageInputBase, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/Position/Page/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pageInputBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary 增加和修改
         * @param {PositionInput} [positionInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataPositionSave: async (positionInput?: PositionInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/Position/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(positionInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PositionApi - functional programming interface
 * @export
 */
export const PositionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PositionApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary 勾选部分Excel导出
         * @param {IDsStringInput} [iDsInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataPositionByIDsExport(iDsInput?: IDsStringInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataPositionByIDsExport(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary 根据多个ID查询对象集合
         * @param {IDsStringInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataPositionByIDsList(iDsInput?: IDsStringInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListPositionOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataPositionByIDsList(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary 删除
         * @param {IDsStringInput} [iDsInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataPositionDelete(iDsInput?: IDsStringInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataPositionDelete(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataPositionIdInfo(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataPositionOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataPositionIdInfo(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataPositionOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryablePosition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataPositionOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataPositionOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataPositionOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataPositionPageAll(pageInputBase?: PageInputBase, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataPageResultPositionOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataPositionPageAll(pageInputBase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary 增加和修改
         * @param {PositionInput} [positionInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataPositionSave(positionInput?: PositionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataPositionSave(positionInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PositionApi - factory interface
 * @export
 */
export const PositionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PositionApiFp(configuration)
    return {
        /**
         *
         * @summary 勾选部分Excel导出
         * @param {IDsStringInput} [iDsInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataPositionByIDsExport(iDsInput?: IDsStringInput, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.projectMasterDataPositionByIDsExport(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 根据多个ID查询对象集合
         * @param {IDsStringInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataPositionByIDsList(iDsInput?: IDsStringInput, options?: any): AxiosPromise<ResultDataListPositionOutput> {
            return localVarFp.projectMasterDataPositionByIDsList(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 删除
         * @param {IDsStringInput} [iDsInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataPositionDelete(iDsInput?: IDsStringInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.projectMasterDataPositionDelete(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataPositionIdInfo(id: string, options?: any): AxiosPromise<ResultDataPositionOutput> {
            return localVarFp.projectMasterDataPositionIdInfo(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataPositionOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryablePosition> {
            return localVarFp.projectMasterDataPositionOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataPositionOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.projectMasterDataPositionOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataPositionPageAll(pageInputBase?: PageInputBase, options?: any): AxiosPromise<ResultDataPageResultPositionOutput> {
            return localVarFp.projectMasterDataPositionPageAll(pageInputBase, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary 增加和修改
         * @param {PositionInput} [positionInput]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataPositionSave(positionInput?: PositionInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.projectMasterDataPositionSave(positionInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for projectMasterDataPositionByIDsExport operation in PositionApi.
 * @export
 * @interface PositionApiProjectMasterDataPositionByIDsExportRequest
 */
export interface PositionApiProjectMasterDataPositionByIDsExportRequest {
    /**
     *
     * @type {IDsStringInput}
     * @memberof PositionApiProjectMasterDataPositionByIDsExport
     */
    readonly iDsInput?: IDsStringInput
}

/**
 * Request parameters for projectMasterDataPositionByIDsList operation in PositionApi.
 * @export
 * @interface PositionApiProjectMasterDataPositionByIDsListRequest
 */
export interface PositionApiProjectMasterDataPositionByIDsListRequest {
    /**
     * 多个主键
     * @type {IDsStringInput}
     * @memberof PositionApiProjectMasterDataPositionByIDsList
     */
    readonly iDsInput?: IDsStringInput
}

/**
 * Request parameters for projectMasterDataPositionDelete operation in PositionApi.
 * @export
 * @interface PositionApiProjectMasterDataPositionDeleteRequest
 */
export interface PositionApiProjectMasterDataPositionDeleteRequest {
    /**
     *
     * @type {IDsStringInput}
     * @memberof PositionApiProjectMasterDataPositionDelete
     */
    readonly iDsInput?: IDsStringInput
}

/**
 * Request parameters for projectMasterDataPositionIdInfo operation in PositionApi.
 * @export
 * @interface PositionApiProjectMasterDataPositionIdInfoRequest
 */
export interface PositionApiProjectMasterDataPositionIdInfoRequest {
    /**
     * 主键
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionIdInfo
     */
    readonly id: string
}

/**
 * Request parameters for projectMasterDataPositionOdataAll operation in PositionApi.
 * @export
 * @interface PositionApiProjectMasterDataPositionOdataAllRequest
 */
export interface PositionApiProjectMasterDataPositionOdataAllRequest {
    /**
     * $filter
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataAll
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataAll
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataAll
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataAll
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataAll
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataAll
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataAll
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataAll
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataAll
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataAll
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataAll
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for projectMasterDataPositionOdataExport operation in PositionApi.
 * @export
 * @interface PositionApiProjectMasterDataPositionOdataExportRequest
 */
export interface PositionApiProjectMasterDataPositionOdataExportRequest {
    /**
     * $filter
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataExport
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataExport
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataExport
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataExport
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataExport
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataExport
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataExport
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataExport
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataExport
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataExport
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof PositionApiProjectMasterDataPositionOdataExport
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for projectMasterDataPositionPageAll operation in PositionApi.
 * @export
 * @interface PositionApiProjectMasterDataPositionPageAllRequest
 */
export interface PositionApiProjectMasterDataPositionPageAllRequest {
    /**
     *
     * @type {PageInputBase}
     * @memberof PositionApiProjectMasterDataPositionPageAll
     */
    readonly pageInputBase?: PageInputBase
}

/**
 * Request parameters for projectMasterDataPositionSave operation in PositionApi.
 * @export
 * @interface PositionApiProjectMasterDataPositionSaveRequest
 */
export interface PositionApiProjectMasterDataPositionSaveRequest {
    /**
     *
     * @type {PositionInput}
     * @memberof PositionApiProjectMasterDataPositionSave
     */
    readonly positionInput?: PositionInput
}

/**
 * PositionApi - object-oriented interface
 * @export
 * @class PositionApi
 * @extends {BaseAPI}
 */
export class PositionApi extends BaseAPI {
    /**
     *
     * @summary 勾选部分Excel导出
     * @param {PositionApiProjectMasterDataPositionByIDsExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public projectMasterDataPositionByIDsExport(requestParameters: PositionApiProjectMasterDataPositionByIDsExportRequest = {}, options?: any) {
        return PositionApiFp(this.configuration).projectMasterDataPositionByIDsExport(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary 根据多个ID查询对象集合
     * @param {PositionApiProjectMasterDataPositionByIDsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public projectMasterDataPositionByIDsList(requestParameters: PositionApiProjectMasterDataPositionByIDsListRequest = {}, options?: any) {
        return PositionApiFp(this.configuration).projectMasterDataPositionByIDsList(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary 删除
     * @param {PositionApiProjectMasterDataPositionDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public projectMasterDataPositionDelete(requestParameters: PositionApiProjectMasterDataPositionDeleteRequest = {}, options?: any) {
        return PositionApiFp(this.configuration).projectMasterDataPositionDelete(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary 根据ID查询对象
     * @param {PositionApiProjectMasterDataPositionIdInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public projectMasterDataPositionIdInfo(requestParameters: PositionApiProjectMasterDataPositionIdInfoRequest, options?: any) {
        return PositionApiFp(this.configuration).projectMasterDataPositionIdInfo(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Odata 查询
     * @param {PositionApiProjectMasterDataPositionOdataAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public projectMasterDataPositionOdataAll(requestParameters: PositionApiProjectMasterDataPositionOdataAllRequest = {}, options?: any) {
        return PositionApiFp(this.configuration).projectMasterDataPositionOdataAll(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary [Odata]Excel导出
     * @param {PositionApiProjectMasterDataPositionOdataExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public projectMasterDataPositionOdataExport(requestParameters: PositionApiProjectMasterDataPositionOdataExportRequest = {}, options?: any) {
        return PositionApiFp(this.configuration).projectMasterDataPositionOdataExport(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary 数据库 分页查询
     * @param {PositionApiProjectMasterDataPositionPageAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public projectMasterDataPositionPageAll(requestParameters: PositionApiProjectMasterDataPositionPageAllRequest = {}, options?: any) {
        return PositionApiFp(this.configuration).projectMasterDataPositionPageAll(requestParameters.pageInputBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary 增加和修改
     * @param {PositionApiProjectMasterDataPositionSaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionApi
     */
    public projectMasterDataPositionSave(requestParameters: PositionApiProjectMasterDataPositionSaveRequest = {}, options?: any) {
        return PositionApiFp(this.configuration).projectMasterDataPositionSave(requestParameters.positionInput, options).then((request) => request(this.axios, this.basePath));
    }
}
