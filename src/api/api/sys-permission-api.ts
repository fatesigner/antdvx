/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IDslongInput } from '../models';
// @ts-ignore
import { PageInputBase } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataFileContentResult } from '../models';
// @ts-ignore
import { ResultDataIQueryableSysPermission } from '../models';
// @ts-ignore
import { ResultDataListSysPermissionOutput } from '../models';
// @ts-ignore
import { ResultDataPageResultSysPermissionOutput } from '../models';
// @ts-ignore
import { ResultDataSysPermissionOutput } from '../models';
// @ts-ignore
import { SysPermissionInput } from '../models';
// @ts-ignore
import { SysPermissionInputs } from '../models';
/**
 * SysPermissionApi - axios parameter creator
 * @export
 */
export const SysPermissionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDslongInput} [iDslongInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionByIDsExport: async (iDslongInput?: IDslongInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/SysPermission/ByIDs/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDslongInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDslongInput} [iDslongInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionByIDsList: async (iDslongInput?: IDslongInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/SysPermission/ByIDs/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDslongInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除
         * @param {IDslongInput} [iDslongInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionDelete: async (iDslongInput?: IDslongInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/SysPermission/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDslongInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionIdInfo: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('systemManageSysPermissionIdInfo', 'id', id)
            const localVarPath = `/SystemManage/SysPermission/{Id}/Info`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionOdataAll: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/SysPermission/Odata/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionOdataExport: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/SysPermission/Odata/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionPageAll: async (pageInputBase?: PageInputBase, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/SysPermission/Page/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pageInputBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 增加和修改
         * @param {SysPermissionInput} [sysPermissionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionSave: async (sysPermissionInput?: SysPermissionInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/SysPermission/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sysPermissionInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 增加和修改
         * @param {SysPermissionInputs} [sysPermissionInputs] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionSaves: async (sysPermissionInputs?: SysPermissionInputs, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/SystemManage/SysPermission/Saves`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sysPermissionInputs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据角色ID获取角色权限相关信息
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionroleIdPermissions: async (roleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('systemManageSysPermissionroleIdPermissions', 'roleId', roleId)
            const localVarPath = `/SystemManage/SysPermission/{roleId}/Permissions`
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SysPermissionApi - functional programming interface
 * @export
 */
export const SysPermissionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SysPermissionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDslongInput} [iDslongInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageSysPermissionByIDsExport(iDslongInput?: IDslongInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageSysPermissionByIDsExport(iDslongInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDslongInput} [iDslongInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageSysPermissionByIDsList(iDslongInput?: IDslongInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListSysPermissionOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageSysPermissionByIDsList(iDslongInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 删除
         * @param {IDslongInput} [iDslongInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageSysPermissionDelete(iDslongInput?: IDslongInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageSysPermissionDelete(iDslongInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageSysPermissionIdInfo(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataSysPermissionOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageSysPermissionIdInfo(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageSysPermissionOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableSysPermission>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageSysPermissionOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageSysPermissionOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageSysPermissionOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageSysPermissionPageAll(pageInputBase?: PageInputBase, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataPageResultSysPermissionOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageSysPermissionPageAll(pageInputBase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 增加和修改
         * @param {SysPermissionInput} [sysPermissionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageSysPermissionSave(sysPermissionInput?: SysPermissionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataSysPermissionOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageSysPermissionSave(sysPermissionInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 增加和修改
         * @param {SysPermissionInputs} [sysPermissionInputs] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageSysPermissionSaves(sysPermissionInputs?: SysPermissionInputs, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageSysPermissionSaves(sysPermissionInputs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据角色ID获取角色权限相关信息
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemManageSysPermissionroleIdPermissions(roleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListSysPermissionOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemManageSysPermissionroleIdPermissions(roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SysPermissionApi - factory interface
 * @export
 */
export const SysPermissionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SysPermissionApiFp(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDslongInput} [iDslongInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionByIDsExport(iDslongInput?: IDslongInput, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.systemManageSysPermissionByIDsExport(iDslongInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDslongInput} [iDslongInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionByIDsList(iDslongInput?: IDslongInput, options?: any): AxiosPromise<ResultDataListSysPermissionOutput> {
            return localVarFp.systemManageSysPermissionByIDsList(iDslongInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除
         * @param {IDslongInput} [iDslongInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionDelete(iDslongInput?: IDslongInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.systemManageSysPermissionDelete(iDslongInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionIdInfo(id: string, options?: any): AxiosPromise<ResultDataSysPermissionOutput> {
            return localVarFp.systemManageSysPermissionIdInfo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableSysPermission> {
            return localVarFp.systemManageSysPermissionOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.systemManageSysPermissionOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionPageAll(pageInputBase?: PageInputBase, options?: any): AxiosPromise<ResultDataPageResultSysPermissionOutput> {
            return localVarFp.systemManageSysPermissionPageAll(pageInputBase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 增加和修改
         * @param {SysPermissionInput} [sysPermissionInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionSave(sysPermissionInput?: SysPermissionInput, options?: any): AxiosPromise<ResultDataSysPermissionOutput> {
            return localVarFp.systemManageSysPermissionSave(sysPermissionInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 增加和修改
         * @param {SysPermissionInputs} [sysPermissionInputs] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionSaves(sysPermissionInputs?: SysPermissionInputs, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.systemManageSysPermissionSaves(sysPermissionInputs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据角色ID获取角色权限相关信息
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemManageSysPermissionroleIdPermissions(roleId: string, options?: any): AxiosPromise<ResultDataListSysPermissionOutput> {
            return localVarFp.systemManageSysPermissionroleIdPermissions(roleId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for systemManageSysPermissionByIDsExport operation in SysPermissionApi.
 * @export
 * @interface SysPermissionApiSystemManageSysPermissionByIDsExportRequest
 */
export interface SysPermissionApiSystemManageSysPermissionByIDsExportRequest {
    /**
     * 
     * @type {IDslongInput}
     * @memberof SysPermissionApiSystemManageSysPermissionByIDsExport
     */
    readonly iDslongInput?: IDslongInput
}

/**
 * Request parameters for systemManageSysPermissionByIDsList operation in SysPermissionApi.
 * @export
 * @interface SysPermissionApiSystemManageSysPermissionByIDsListRequest
 */
export interface SysPermissionApiSystemManageSysPermissionByIDsListRequest {
    /**
     * 多个主键
     * @type {IDslongInput}
     * @memberof SysPermissionApiSystemManageSysPermissionByIDsList
     */
    readonly iDslongInput?: IDslongInput
}

/**
 * Request parameters for systemManageSysPermissionDelete operation in SysPermissionApi.
 * @export
 * @interface SysPermissionApiSystemManageSysPermissionDeleteRequest
 */
export interface SysPermissionApiSystemManageSysPermissionDeleteRequest {
    /**
     * 
     * @type {IDslongInput}
     * @memberof SysPermissionApiSystemManageSysPermissionDelete
     */
    readonly iDslongInput?: IDslongInput
}

/**
 * Request parameters for systemManageSysPermissionIdInfo operation in SysPermissionApi.
 * @export
 * @interface SysPermissionApiSystemManageSysPermissionIdInfoRequest
 */
export interface SysPermissionApiSystemManageSysPermissionIdInfoRequest {
    /**
     * 主键
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionIdInfo
     */
    readonly id: string
}

/**
 * Request parameters for systemManageSysPermissionOdataAll operation in SysPermissionApi.
 * @export
 * @interface SysPermissionApiSystemManageSysPermissionOdataAllRequest
 */
export interface SysPermissionApiSystemManageSysPermissionOdataAllRequest {
    /**
     * $filter
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataAll
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataAll
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataAll
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataAll
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataAll
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataAll
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataAll
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataAll
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataAll
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataAll
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataAll
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for systemManageSysPermissionOdataExport operation in SysPermissionApi.
 * @export
 * @interface SysPermissionApiSystemManageSysPermissionOdataExportRequest
 */
export interface SysPermissionApiSystemManageSysPermissionOdataExportRequest {
    /**
     * $filter
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataExport
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataExport
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataExport
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataExport
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataExport
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataExport
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataExport
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataExport
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataExport
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataExport
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionOdataExport
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for systemManageSysPermissionPageAll operation in SysPermissionApi.
 * @export
 * @interface SysPermissionApiSystemManageSysPermissionPageAllRequest
 */
export interface SysPermissionApiSystemManageSysPermissionPageAllRequest {
    /**
     * 
     * @type {PageInputBase}
     * @memberof SysPermissionApiSystemManageSysPermissionPageAll
     */
    readonly pageInputBase?: PageInputBase
}

/**
 * Request parameters for systemManageSysPermissionSave operation in SysPermissionApi.
 * @export
 * @interface SysPermissionApiSystemManageSysPermissionSaveRequest
 */
export interface SysPermissionApiSystemManageSysPermissionSaveRequest {
    /**
     * 
     * @type {SysPermissionInput}
     * @memberof SysPermissionApiSystemManageSysPermissionSave
     */
    readonly sysPermissionInput?: SysPermissionInput
}

/**
 * Request parameters for systemManageSysPermissionSaves operation in SysPermissionApi.
 * @export
 * @interface SysPermissionApiSystemManageSysPermissionSavesRequest
 */
export interface SysPermissionApiSystemManageSysPermissionSavesRequest {
    /**
     * 
     * @type {SysPermissionInputs}
     * @memberof SysPermissionApiSystemManageSysPermissionSaves
     */
    readonly sysPermissionInputs?: SysPermissionInputs
}

/**
 * Request parameters for systemManageSysPermissionroleIdPermissions operation in SysPermissionApi.
 * @export
 * @interface SysPermissionApiSystemManageSysPermissionroleIdPermissionsRequest
 */
export interface SysPermissionApiSystemManageSysPermissionroleIdPermissionsRequest {
    /**
     * 
     * @type {string}
     * @memberof SysPermissionApiSystemManageSysPermissionroleIdPermissions
     */
    readonly roleId: string
}

/**
 * SysPermissionApi - object-oriented interface
 * @export
 * @class SysPermissionApi
 * @extends {BaseAPI}
 */
export class SysPermissionApi extends BaseAPI {
    /**
     * 
     * @summary 勾选部分Excel导出
     * @param {SysPermissionApiSystemManageSysPermissionByIDsExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysPermissionApi
     */
    public systemManageSysPermissionByIDsExport(requestParameters: SysPermissionApiSystemManageSysPermissionByIDsExportRequest = {}, options?: any) {
        return SysPermissionApiFp(this.configuration).systemManageSysPermissionByIDsExport(requestParameters.iDslongInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据多个ID查询对象集合
     * @param {SysPermissionApiSystemManageSysPermissionByIDsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysPermissionApi
     */
    public systemManageSysPermissionByIDsList(requestParameters: SysPermissionApiSystemManageSysPermissionByIDsListRequest = {}, options?: any) {
        return SysPermissionApiFp(this.configuration).systemManageSysPermissionByIDsList(requestParameters.iDslongInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除
     * @param {SysPermissionApiSystemManageSysPermissionDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysPermissionApi
     */
    public systemManageSysPermissionDelete(requestParameters: SysPermissionApiSystemManageSysPermissionDeleteRequest = {}, options?: any) {
        return SysPermissionApiFp(this.configuration).systemManageSysPermissionDelete(requestParameters.iDslongInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据ID查询对象
     * @param {SysPermissionApiSystemManageSysPermissionIdInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysPermissionApi
     */
    public systemManageSysPermissionIdInfo(requestParameters: SysPermissionApiSystemManageSysPermissionIdInfoRequest, options?: any) {
        return SysPermissionApiFp(this.configuration).systemManageSysPermissionIdInfo(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Odata 查询
     * @param {SysPermissionApiSystemManageSysPermissionOdataAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysPermissionApi
     */
    public systemManageSysPermissionOdataAll(requestParameters: SysPermissionApiSystemManageSysPermissionOdataAllRequest = {}, options?: any) {
        return SysPermissionApiFp(this.configuration).systemManageSysPermissionOdataAll(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary [Odata]Excel导出
     * @param {SysPermissionApiSystemManageSysPermissionOdataExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysPermissionApi
     */
    public systemManageSysPermissionOdataExport(requestParameters: SysPermissionApiSystemManageSysPermissionOdataExportRequest = {}, options?: any) {
        return SysPermissionApiFp(this.configuration).systemManageSysPermissionOdataExport(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 数据库 分页查询
     * @param {SysPermissionApiSystemManageSysPermissionPageAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysPermissionApi
     */
    public systemManageSysPermissionPageAll(requestParameters: SysPermissionApiSystemManageSysPermissionPageAllRequest = {}, options?: any) {
        return SysPermissionApiFp(this.configuration).systemManageSysPermissionPageAll(requestParameters.pageInputBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 增加和修改
     * @param {SysPermissionApiSystemManageSysPermissionSaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysPermissionApi
     */
    public systemManageSysPermissionSave(requestParameters: SysPermissionApiSystemManageSysPermissionSaveRequest = {}, options?: any) {
        return SysPermissionApiFp(this.configuration).systemManageSysPermissionSave(requestParameters.sysPermissionInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 增加和修改
     * @param {SysPermissionApiSystemManageSysPermissionSavesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysPermissionApi
     */
    public systemManageSysPermissionSaves(requestParameters: SysPermissionApiSystemManageSysPermissionSavesRequest = {}, options?: any) {
        return SysPermissionApiFp(this.configuration).systemManageSysPermissionSaves(requestParameters.sysPermissionInputs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据角色ID获取角色权限相关信息
     * @param {SysPermissionApiSystemManageSysPermissionroleIdPermissionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SysPermissionApi
     */
    public systemManageSysPermissionroleIdPermissions(requestParameters: SysPermissionApiSystemManageSysPermissionroleIdPermissionsRequest, options?: any) {
        return SysPermissionApiFp(this.configuration).systemManageSysPermissionroleIdPermissions(requestParameters.roleId, options).then((request) => request(this.axios, this.basePath));
    }
}
