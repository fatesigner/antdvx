/* tslint:disable */
/* eslint-disable */
/**
 * 全部
 * 全部API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IDsInput } from '../models';
// @ts-ignore
import { PageInputBase } from '../models';
// @ts-ignore
import { ProjectExchangeRateInput } from '../models';
// @ts-ignore
import { ResultDataBoolean } from '../models';
// @ts-ignore
import { ResultDataFileContentResult } from '../models';
// @ts-ignore
import { ResultDataIQueryableProjectExchangeRate } from '../models';
// @ts-ignore
import { ResultDataListProjectExchangeRateOutput } from '../models';
// @ts-ignore
import { ResultDataPageResultProjectExchangeRateOutput } from '../models';
// @ts-ignore
import { ResultDataProjectExchangeRateOutput } from '../models';
/**
 * ProjectExchangeRateApi - axios parameter creator
 * @export
 */
export const ProjectExchangeRateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectExchangeRateByIDsExport: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectExchangeRate/ByIDs/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectExchangeRateByIDsList: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectExchangeRate/ByIDs/List`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectExchangeRateDelete: async (iDsInput?: IDsInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectExchangeRate/Delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iDsInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectExchangeRateIdInfo: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('projectMasterDataProjectExchangeRateIdInfo', 'id', id)
            const localVarPath = `/ProjectMasterData/ProjectExchangeRate/{Id}/Info`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectExchangeRateOdataAll: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectExchangeRate/Odata/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectExchangeRateOdataExport: async (filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectExchangeRate/Odata/Export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (apply !== undefined) {
                localVarQueryParameter['apply'] = apply;
            }

            if (orderby !== undefined) {
                localVarQueryParameter['orderby'] = orderby;
            }

            if (top !== undefined) {
                localVarQueryParameter['top'] = top;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            if (select !== undefined) {
                localVarQueryParameter['select'] = select;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (skiptoken !== undefined) {
                localVarQueryParameter['skiptoken'] = skiptoken;
            }

            if (deltatoken !== undefined) {
                localVarQueryParameter['deltatoken'] = deltatoken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectExchangeRatePageAll: async (pageInputBase?: PageInputBase, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectExchangeRate/Page/All`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pageInputBase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 增加和修改
         * @param {ProjectExchangeRateInput} [projectExchangeRateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectExchangeRateSave: async (projectExchangeRateInput?: ProjectExchangeRateInput, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ProjectMasterData/ProjectExchangeRate/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json;odata.metadata=minimal;odata.streaming=true';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectExchangeRateInput, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectExchangeRateApi - functional programming interface
 * @export
 */
export const ProjectExchangeRateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectExchangeRateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectExchangeRateByIDsExport(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectExchangeRateByIDsExport(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectExchangeRateByIDsList(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataListProjectExchangeRateOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectExchangeRateByIDsList(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectExchangeRateDelete(iDsInput?: IDsInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectExchangeRateDelete(iDsInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectExchangeRateIdInfo(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataProjectExchangeRateOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectExchangeRateIdInfo(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectExchangeRateOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataIQueryableProjectExchangeRate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectExchangeRateOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectExchangeRateOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataFileContentResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectExchangeRateOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectExchangeRatePageAll(pageInputBase?: PageInputBase, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataPageResultProjectExchangeRateOutput>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectExchangeRatePageAll(pageInputBase, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 增加和修改
         * @param {ProjectExchangeRateInput} [projectExchangeRateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectMasterDataProjectExchangeRateSave(projectExchangeRateInput?: ProjectExchangeRateInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDataBoolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectMasterDataProjectExchangeRateSave(projectExchangeRateInput, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectExchangeRateApi - factory interface
 * @export
 */
export const ProjectExchangeRateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectExchangeRateApiFp(configuration)
    return {
        /**
         * 
         * @summary 勾选部分Excel导出
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectExchangeRateByIDsExport(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.projectMasterDataProjectExchangeRateByIDsExport(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据多个ID查询对象集合
         * @param {IDsInput} [iDsInput] 多个主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectExchangeRateByIDsList(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataListProjectExchangeRateOutput> {
            return localVarFp.projectMasterDataProjectExchangeRateByIDsList(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除
         * @param {IDsInput} [iDsInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectExchangeRateDelete(iDsInput?: IDsInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.projectMasterDataProjectExchangeRateDelete(iDsInput, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据ID查询对象
         * @param {string} id 主键
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectExchangeRateIdInfo(id: string, options?: any): AxiosPromise<ResultDataProjectExchangeRateOutput> {
            return localVarFp.projectMasterDataProjectExchangeRateIdInfo(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Odata 查询
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectExchangeRateOdataAll(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataIQueryableProjectExchangeRate> {
            return localVarFp.projectMasterDataProjectExchangeRateOdataAll(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary [Odata]Excel导出
         * @param {string} [filter] $filter
         * @param {string} [apply] $apply
         * @param {string} [orderby] $orderby
         * @param {string} [top] $top
         * @param {string} [skip] $skip
         * @param {string} [select] $select
         * @param {string} [expand] $expand
         * @param {string} [count] $count
         * @param {string} [format] $format
         * @param {string} [skiptoken] $skiptoken
         * @param {string} [deltatoken] $deltatoken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectExchangeRateOdataExport(filter?: string, apply?: string, orderby?: string, top?: string, skip?: string, select?: string, expand?: string, count?: string, format?: string, skiptoken?: string, deltatoken?: string, options?: any): AxiosPromise<ResultDataFileContentResult> {
            return localVarFp.projectMasterDataProjectExchangeRateOdataExport(filter, apply, orderby, top, skip, select, expand, count, format, skiptoken, deltatoken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 数据库 分页查询
         * @param {PageInputBase} [pageInputBase] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectExchangeRatePageAll(pageInputBase?: PageInputBase, options?: any): AxiosPromise<ResultDataPageResultProjectExchangeRateOutput> {
            return localVarFp.projectMasterDataProjectExchangeRatePageAll(pageInputBase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 增加和修改
         * @param {ProjectExchangeRateInput} [projectExchangeRateInput] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectMasterDataProjectExchangeRateSave(projectExchangeRateInput?: ProjectExchangeRateInput, options?: any): AxiosPromise<ResultDataBoolean> {
            return localVarFp.projectMasterDataProjectExchangeRateSave(projectExchangeRateInput, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for projectMasterDataProjectExchangeRateByIDsExport operation in ProjectExchangeRateApi.
 * @export
 * @interface ProjectExchangeRateApiProjectMasterDataProjectExchangeRateByIDsExportRequest
 */
export interface ProjectExchangeRateApiProjectMasterDataProjectExchangeRateByIDsExportRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateByIDsExport
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for projectMasterDataProjectExchangeRateByIDsList operation in ProjectExchangeRateApi.
 * @export
 * @interface ProjectExchangeRateApiProjectMasterDataProjectExchangeRateByIDsListRequest
 */
export interface ProjectExchangeRateApiProjectMasterDataProjectExchangeRateByIDsListRequest {
    /**
     * 多个主键
     * @type {IDsInput}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateByIDsList
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for projectMasterDataProjectExchangeRateDelete operation in ProjectExchangeRateApi.
 * @export
 * @interface ProjectExchangeRateApiProjectMasterDataProjectExchangeRateDeleteRequest
 */
export interface ProjectExchangeRateApiProjectMasterDataProjectExchangeRateDeleteRequest {
    /**
     * 
     * @type {IDsInput}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateDelete
     */
    readonly iDsInput?: IDsInput
}

/**
 * Request parameters for projectMasterDataProjectExchangeRateIdInfo operation in ProjectExchangeRateApi.
 * @export
 * @interface ProjectExchangeRateApiProjectMasterDataProjectExchangeRateIdInfoRequest
 */
export interface ProjectExchangeRateApiProjectMasterDataProjectExchangeRateIdInfoRequest {
    /**
     * 主键
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateIdInfo
     */
    readonly id: string
}

/**
 * Request parameters for projectMasterDataProjectExchangeRateOdataAll operation in ProjectExchangeRateApi.
 * @export
 * @interface ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataAllRequest
 */
export interface ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataAllRequest {
    /**
     * $filter
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataAll
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataAll
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataAll
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataAll
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataAll
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataAll
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataAll
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataAll
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataAll
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataAll
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataAll
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for projectMasterDataProjectExchangeRateOdataExport operation in ProjectExchangeRateApi.
 * @export
 * @interface ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataExportRequest
 */
export interface ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataExportRequest {
    /**
     * $filter
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataExport
     */
    readonly filter?: string

    /**
     * $apply
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataExport
     */
    readonly apply?: string

    /**
     * $orderby
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataExport
     */
    readonly orderby?: string

    /**
     * $top
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataExport
     */
    readonly top?: string

    /**
     * $skip
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataExport
     */
    readonly skip?: string

    /**
     * $select
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataExport
     */
    readonly select?: string

    /**
     * $expand
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataExport
     */
    readonly expand?: string

    /**
     * $count
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataExport
     */
    readonly count?: string

    /**
     * $format
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataExport
     */
    readonly format?: string

    /**
     * $skiptoken
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataExport
     */
    readonly skiptoken?: string

    /**
     * $deltatoken
     * @type {string}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataExport
     */
    readonly deltatoken?: string
}

/**
 * Request parameters for projectMasterDataProjectExchangeRatePageAll operation in ProjectExchangeRateApi.
 * @export
 * @interface ProjectExchangeRateApiProjectMasterDataProjectExchangeRatePageAllRequest
 */
export interface ProjectExchangeRateApiProjectMasterDataProjectExchangeRatePageAllRequest {
    /**
     * 
     * @type {PageInputBase}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRatePageAll
     */
    readonly pageInputBase?: PageInputBase
}

/**
 * Request parameters for projectMasterDataProjectExchangeRateSave operation in ProjectExchangeRateApi.
 * @export
 * @interface ProjectExchangeRateApiProjectMasterDataProjectExchangeRateSaveRequest
 */
export interface ProjectExchangeRateApiProjectMasterDataProjectExchangeRateSaveRequest {
    /**
     * 
     * @type {ProjectExchangeRateInput}
     * @memberof ProjectExchangeRateApiProjectMasterDataProjectExchangeRateSave
     */
    readonly projectExchangeRateInput?: ProjectExchangeRateInput
}

/**
 * ProjectExchangeRateApi - object-oriented interface
 * @export
 * @class ProjectExchangeRateApi
 * @extends {BaseAPI}
 */
export class ProjectExchangeRateApi extends BaseAPI {
    /**
     * 
     * @summary 勾选部分Excel导出
     * @param {ProjectExchangeRateApiProjectMasterDataProjectExchangeRateByIDsExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectExchangeRateApi
     */
    public projectMasterDataProjectExchangeRateByIDsExport(requestParameters: ProjectExchangeRateApiProjectMasterDataProjectExchangeRateByIDsExportRequest = {}, options?: any) {
        return ProjectExchangeRateApiFp(this.configuration).projectMasterDataProjectExchangeRateByIDsExport(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据多个ID查询对象集合
     * @param {ProjectExchangeRateApiProjectMasterDataProjectExchangeRateByIDsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectExchangeRateApi
     */
    public projectMasterDataProjectExchangeRateByIDsList(requestParameters: ProjectExchangeRateApiProjectMasterDataProjectExchangeRateByIDsListRequest = {}, options?: any) {
        return ProjectExchangeRateApiFp(this.configuration).projectMasterDataProjectExchangeRateByIDsList(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除
     * @param {ProjectExchangeRateApiProjectMasterDataProjectExchangeRateDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectExchangeRateApi
     */
    public projectMasterDataProjectExchangeRateDelete(requestParameters: ProjectExchangeRateApiProjectMasterDataProjectExchangeRateDeleteRequest = {}, options?: any) {
        return ProjectExchangeRateApiFp(this.configuration).projectMasterDataProjectExchangeRateDelete(requestParameters.iDsInput, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据ID查询对象
     * @param {ProjectExchangeRateApiProjectMasterDataProjectExchangeRateIdInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectExchangeRateApi
     */
    public projectMasterDataProjectExchangeRateIdInfo(requestParameters: ProjectExchangeRateApiProjectMasterDataProjectExchangeRateIdInfoRequest, options?: any) {
        return ProjectExchangeRateApiFp(this.configuration).projectMasterDataProjectExchangeRateIdInfo(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Odata 查询
     * @param {ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectExchangeRateApi
     */
    public projectMasterDataProjectExchangeRateOdataAll(requestParameters: ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataAllRequest = {}, options?: any) {
        return ProjectExchangeRateApiFp(this.configuration).projectMasterDataProjectExchangeRateOdataAll(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary [Odata]Excel导出
     * @param {ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectExchangeRateApi
     */
    public projectMasterDataProjectExchangeRateOdataExport(requestParameters: ProjectExchangeRateApiProjectMasterDataProjectExchangeRateOdataExportRequest = {}, options?: any) {
        return ProjectExchangeRateApiFp(this.configuration).projectMasterDataProjectExchangeRateOdataExport(requestParameters.filter, requestParameters.apply, requestParameters.orderby, requestParameters.top, requestParameters.skip, requestParameters.select, requestParameters.expand, requestParameters.count, requestParameters.format, requestParameters.skiptoken, requestParameters.deltatoken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 数据库 分页查询
     * @param {ProjectExchangeRateApiProjectMasterDataProjectExchangeRatePageAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectExchangeRateApi
     */
    public projectMasterDataProjectExchangeRatePageAll(requestParameters: ProjectExchangeRateApiProjectMasterDataProjectExchangeRatePageAllRequest = {}, options?: any) {
        return ProjectExchangeRateApiFp(this.configuration).projectMasterDataProjectExchangeRatePageAll(requestParameters.pageInputBase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 增加和修改
     * @param {ProjectExchangeRateApiProjectMasterDataProjectExchangeRateSaveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectExchangeRateApi
     */
    public projectMasterDataProjectExchangeRateSave(requestParameters: ProjectExchangeRateApiProjectMasterDataProjectExchangeRateSaveRequest = {}, options?: any) {
        return ProjectExchangeRateApiFp(this.configuration).projectMasterDataProjectExchangeRateSave(requestParameters.projectExchangeRateInput, options).then((request) => request(this.axios, this.basePath));
    }
}
